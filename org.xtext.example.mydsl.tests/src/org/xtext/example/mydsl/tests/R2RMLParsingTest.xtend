/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.r2RML.Mapping
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.emf.common.util.URI

@ExtendWith(InjectionExtension)
@InjectWith(R2RMLInjectorProvider)
class R2RMLParsingTest {
	@Inject
	ParseHelper<Mapping> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix ex: <http://example.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# Mapping 1a: Patient
<#TriplesMap1>
    rr:logicalTable [ rr:sqlQuery SELECT patientid, name FROM tbl_patient ];
    rr:subjectMap [
        rr:template "inst:ds1/{patientid}";
        rr:class ex:Patient;
    ];
    rr:predicateObjectMap [
        rr:predicate ex:hasName;
        rr:objectMap [ rr:column "name"; rr:datatype xsd:string ];
    ].

# Mapping 2a: Neoplasm
<#TriplesMap2>
    rr:logicalTable [ rr:sqlQuery SELECT patientid FROM tbl_patient ];
    rr:subjectMap [ rr:template "inst:ds1/{patientid}" ];
    rr:predicateObjectMap [
        rr:predicate ex:hasNeoplasm;
        rr:objectMap [ rr:template "inst:ds1/neoplasm/{patientid}" ];
    ].

# Mapping 3a: NSCLC
<#TriplesMap3>
    rr:logicalTable [ rr:sqlQuery SELECT patientid FROM tbl_patient WHERE type = false ];
    rr:subjectMap [ 
        rr:template "inst:ds1/neoplasm/{patientid}" ;
        rr:class ex:NSCLC
    ].

# Mapping 4a: SCLC
<#TriplesMap4>
    rr:logicalTable [ rr:sqlQuery SELECT patientid FROM tbl_patient WHERE type = true ];
    rr:subjectMap [ 
        rr:template "inst:ds1/neoplasm/{patientid}" ;
        rr:class ex:SCLC
    ].

# Mapping 5a: Stage IIIa
<#TriplesMap5>
    rr:logicalTable [ rr:sqlQuery SELECT patientid FROM tbl_patient WHERE stage = 4 AND type = false ];
    rr:subjectMap [ rr:template "inst:ds1/neoplasm/{patientid}" ];
    rr:predicateObjectMap [
        rr:predicate ex:hasStage;
        rr:objectMap [ rr:constant "inst:stage-IIIa" ];
    ].

		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		// Serialize the result to an XMI file
		val resourceSet = new ResourceSetImpl()
        resourceSet.resourceFactoryRegistry.extensionToFactoryMap.put("xmi", new XMIResourceFactoryImpl())
        val resource = resourceSet.createResource(URI.createFileURI("D:/eclipse-modeling-2023-09-R-win32-x86_64/xtext_workspace/R2RMLXtext/r2rml_out.xmi"))
        resource.contents.add(result)
        resource.save(null)
	}
}
