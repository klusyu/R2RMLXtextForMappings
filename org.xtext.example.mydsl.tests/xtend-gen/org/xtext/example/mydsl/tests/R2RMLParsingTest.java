/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.r2RML.Mapping;

@ExtendWith(InjectionExtension.class)
@InjectWith(R2RMLInjectorProvider.class)
@SuppressWarnings("all")
public class R2RMLParsingTest {
  @Inject
  private ParseHelper<Mapping> parseHelper;

  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("@prefix rr: <http://www.w3.org/ns/r2rml#>.");
      _builder.newLine();
      _builder.append("@prefix ex: <http://example.org/> .");
      _builder.newLine();
      _builder.append("@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .");
      _builder.newLine();
      _builder.newLine();
      _builder.append("# Mapping 1a: Patient");
      _builder.newLine();
      _builder.append("<#TriplesMap1>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:logicalTable [ rr:sqlQuery SELECT patientid, name FROM tbl_patient ];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:subjectMap [");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:template \"inst:ds1/{patientid}\";");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:class ex:Patient;");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:predicateObjectMap [");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:predicate ex:hasName;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:objectMap [ rr:column \"name\"; rr:datatype xsd:string ];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("].");
      _builder.newLine();
      _builder.newLine();
      _builder.append("# Mapping 2a: Neoplasm");
      _builder.newLine();
      _builder.append("<#TriplesMap2>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:logicalTable [ rr:sqlQuery SELECT patientid FROM tbl_patient ];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:subjectMap [ rr:template \"inst:ds1/{patientid}\" ];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:predicateObjectMap [");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:predicate ex:hasNeoplasm;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:objectMap [ rr:template \"inst:ds1/neoplasm/{patientid}\" ];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("].");
      _builder.newLine();
      _builder.newLine();
      _builder.append("# Mapping 3a: NSCLC");
      _builder.newLine();
      _builder.append("<#TriplesMap3>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:logicalTable [ rr:sqlQuery SELECT patientid FROM tbl_patient WHERE type = false ];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:subjectMap [ ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:template \"inst:ds1/neoplasm/{patientid}\" ;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:class ex:NSCLC");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("].");
      _builder.newLine();
      _builder.newLine();
      _builder.append("# Mapping 4a: SCLC");
      _builder.newLine();
      _builder.append("<#TriplesMap4>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:logicalTable [ rr:sqlQuery SELECT patientid FROM tbl_patient WHERE type = true ];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:subjectMap [ ");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:template \"inst:ds1/neoplasm/{patientid}\" ;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:class ex:SCLC");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("].");
      _builder.newLine();
      _builder.newLine();
      _builder.append("# Mapping 5a: Stage IIIa");
      _builder.newLine();
      _builder.append("<#TriplesMap5>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:logicalTable [ rr:sqlQuery SELECT patientid FROM tbl_patient WHERE stage = 4 AND type = false ];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:subjectMap [ rr:template \"inst:ds1/neoplasm/{patientid}\" ];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("rr:predicateObjectMap [");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:predicate ex:hasStage;");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rr:objectMap [ rr:constant \"inst:stage-IIIa\" ];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("].");
      _builder.newLine();
      _builder.newLine();
      final Mapping result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final ResourceSetImpl resourceSet = new ResourceSetImpl();
      Map<String, Object> _extensionToFactoryMap = resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap();
      XMIResourceFactoryImpl _xMIResourceFactoryImpl = new XMIResourceFactoryImpl();
      _extensionToFactoryMap.put("xmi", _xMIResourceFactoryImpl);
      final Resource resource = resourceSet.createResource(URI.createFileURI("D:/eclipse-modeling-2023-09-R-win32-x86_64/xtext_workspace/R2RMLXtext/r2rml_out.xmi"));
      resource.getContents().add(result);
      resource.save(null);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
