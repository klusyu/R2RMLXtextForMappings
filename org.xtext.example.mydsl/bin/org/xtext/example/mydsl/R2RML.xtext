grammar org.xtext.example.mydsl.R2RML with org.eclipse.xtext.common.Terminals

generate r2RML "http://www.xtext.org/example/mydsl/R2RML"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Mapping:
    statements+=Statement*
;

Statement:
	(prefix=Prefix | triplesMap=TriplesMap) '.'
;

Prefix:
    '@prefix' prefixName=PrefixName uri=URIREF
;    
    
TriplesMap:
    name=URIREF
        logicalTable=LogicalTable
        (subjectMap=SubjectMap)?
        (predicateObjectMaps+=PredicateObjectMap)*
;

LogicalTable:
    PrefixName 'logicalTable' '['
        (PrefixName 'sqlQuery' query=SimpleSelectStatement | PrefixName 'tableName' tableName=STRING) 
    ']' ';'?
;

SubjectMap:
    PrefixName 'subjectMap' '['
        template=Template
        (class=Class)?
    ']' ';'?
;

PredicateObjectMap:
    PrefixName 'predicateObjectMap' '['
        predicate=Predicate
        objectMap=ObjectMap
    ']' ';'?
;

ObjectMap:
    {ObjectMap} PrefixName 'objectMap' '['
        column=Column?
        template=Template?
        constant=Constant?
        datatype=Datatype?
    ']' ';'?
;

// Additional entities that can be referenced
Class:
    PrefixName 'class' className=Qname ';'?;

Predicate:
    PrefixName 'predicate' predicateName=Qname ';'?;

Template:
	PrefixName 'template' name=QuotedString ';'?	
;

Column:
	PrefixName 'column' name=QuotedString ';'?
;

Datatype:
    PrefixName 'datatype' dtName=Qname ';'?;
    
Constant:
	PrefixName 'constant' (constName=iResource | constStr=QuotedString) ';'?
;

    
iResource:
	uriRef=URIREF | qname=Qname
;

NodeID:
	'_:' name=ID
;

Qname:
	{Qname} =>prefixName=PrefixName =>name=ID?
;

PrefixName returns ecore::EString:
	ID? ':'
;

QuotedString returns ecore::EString:
	STRING
;

///////////////// SQLQuery /////////////////
SimpleSelectStatement:
    'SELECT' selectedColumns=SelectedColumns 'FROM' tableName=ID (whereClause=WhereClause)?;

SelectedColumns:
    columns+=ID (',' columns+=ID)*;

WhereClause:
    'WHERE' conditions+=Condition (logic+=Logic conditions+=Condition)*;

Condition:
    column=ID operator=Operator value=Value;

Logic:
    'AND' | 'OR';

Operator:
    '=' | '<>' | '<' | '<=' | '>' | '>=';

Value:
    BooleanValue | NumberValue | StringValue;

BooleanValue:
    value=('true' | 'false');

NumberValue:
    value=INT;

StringValue:
    value=STRING;
///////////////// SQLQuery end /////////////////


terminal DOUBLE:
	('-' | '+')? (('0'..'9')+ '.' ('0'..'9')* EXPONENT | '.' ('0'..'9')+ EXPONENT | ('0'..'9')+ EXPONENT)
;

terminal DECIMAL:
	('-'|'+')? (('0'..'9')+ '.' ('0'..'9')* | '.' ('0'..'9')+)
;

terminal EXPONENT:
	('e' | 'E') ('-'|'+')? ('0'..'9')+
;

terminal URIREF returns ecore::EString:
	'<' -> '>'
;

@Override 
terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;
@Override
terminal SL_COMMENT : '#' !('\n'|'\r')* ('\r'? '\n')?;
@Override
terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'" |
			'"""' -> '"""'
		;