/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.r2RML.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.r2RML.BooleanValue;
import org.xtext.example.mydsl.r2RML.Column;
import org.xtext.example.mydsl.r2RML.Condition;
import org.xtext.example.mydsl.r2RML.Constant;
import org.xtext.example.mydsl.r2RML.Datatype;
import org.xtext.example.mydsl.r2RML.LogicalTable;
import org.xtext.example.mydsl.r2RML.Mapping;
import org.xtext.example.mydsl.r2RML.NodeID;
import org.xtext.example.mydsl.r2RML.NumberValue;
import org.xtext.example.mydsl.r2RML.ObjectMap;
import org.xtext.example.mydsl.r2RML.Predicate;
import org.xtext.example.mydsl.r2RML.PredicateObjectMap;
import org.xtext.example.mydsl.r2RML.Prefix;
import org.xtext.example.mydsl.r2RML.Qname;
import org.xtext.example.mydsl.r2RML.R2RMLFactory;
import org.xtext.example.mydsl.r2RML.R2RMLPackage;
import org.xtext.example.mydsl.r2RML.SelectedColumns;
import org.xtext.example.mydsl.r2RML.SimpleSelectStatement;
import org.xtext.example.mydsl.r2RML.Statement;
import org.xtext.example.mydsl.r2RML.StringValue;
import org.xtext.example.mydsl.r2RML.SubjectMap;
import org.xtext.example.mydsl.r2RML.Template;
import org.xtext.example.mydsl.r2RML.TriplesMap;
import org.xtext.example.mydsl.r2RML.Value;
import org.xtext.example.mydsl.r2RML.WhereClause;
import org.xtext.example.mydsl.r2RML.iResource;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class R2RMLFactoryImpl extends EFactoryImpl implements R2RMLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static R2RMLFactory init()
  {
    try
    {
      R2RMLFactory theR2RMLFactory = (R2RMLFactory)EPackage.Registry.INSTANCE.getEFactory(R2RMLPackage.eNS_URI);
      if (theR2RMLFactory != null)
      {
        return theR2RMLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new R2RMLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public R2RMLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case R2RMLPackage.MAPPING: return createMapping();
      case R2RMLPackage.STATEMENT: return createStatement();
      case R2RMLPackage.PREFIX: return createPrefix();
      case R2RMLPackage.TRIPLES_MAP: return createTriplesMap();
      case R2RMLPackage.LOGICAL_TABLE: return createLogicalTable();
      case R2RMLPackage.SUBJECT_MAP: return createSubjectMap();
      case R2RMLPackage.PREDICATE_OBJECT_MAP: return createPredicateObjectMap();
      case R2RMLPackage.OBJECT_MAP: return createObjectMap();
      case R2RMLPackage.CLASS: return createClass();
      case R2RMLPackage.PREDICATE: return createPredicate();
      case R2RMLPackage.TEMPLATE: return createTemplate();
      case R2RMLPackage.COLUMN: return createColumn();
      case R2RMLPackage.DATATYPE: return createDatatype();
      case R2RMLPackage.CONSTANT: return createConstant();
      case R2RMLPackage.IRESOURCE: return createiResource();
      case R2RMLPackage.NODE_ID: return createNodeID();
      case R2RMLPackage.QNAME: return createQname();
      case R2RMLPackage.SIMPLE_SELECT_STATEMENT: return createSimpleSelectStatement();
      case R2RMLPackage.SELECTED_COLUMNS: return createSelectedColumns();
      case R2RMLPackage.WHERE_CLAUSE: return createWhereClause();
      case R2RMLPackage.CONDITION: return createCondition();
      case R2RMLPackage.VALUE: return createValue();
      case R2RMLPackage.BOOLEAN_VALUE: return createBooleanValue();
      case R2RMLPackage.NUMBER_VALUE: return createNumberValue();
      case R2RMLPackage.STRING_VALUE: return createStringValue();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Prefix createPrefix()
  {
    PrefixImpl prefix = new PrefixImpl();
    return prefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TriplesMap createTriplesMap()
  {
    TriplesMapImpl triplesMap = new TriplesMapImpl();
    return triplesMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalTable createLogicalTable()
  {
    LogicalTableImpl logicalTable = new LogicalTableImpl();
    return logicalTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubjectMap createSubjectMap()
  {
    SubjectMapImpl subjectMap = new SubjectMapImpl();
    return subjectMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredicateObjectMap createPredicateObjectMap()
  {
    PredicateObjectMapImpl predicateObjectMap = new PredicateObjectMapImpl();
    return predicateObjectMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectMap createObjectMap()
  {
    ObjectMapImpl objectMap = new ObjectMapImpl();
    return objectMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.r2RML.Class createClass()
  {
    ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Predicate createPredicate()
  {
    PredicateImpl predicate = new PredicateImpl();
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Template createTemplate()
  {
    TemplateImpl template = new TemplateImpl();
    return template;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Column createColumn()
  {
    ColumnImpl column = new ColumnImpl();
    return column;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Datatype createDatatype()
  {
    DatatypeImpl datatype = new DatatypeImpl();
    return datatype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constant createConstant()
  {
    ConstantImpl constant = new ConstantImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public iResource createiResource()
  {
    iResourceImpl iResource = new iResourceImpl();
    return iResource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeID createNodeID()
  {
    NodeIDImpl nodeID = new NodeIDImpl();
    return nodeID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Qname createQname()
  {
    QnameImpl qname = new QnameImpl();
    return qname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleSelectStatement createSimpleSelectStatement()
  {
    SimpleSelectStatementImpl simpleSelectStatement = new SimpleSelectStatementImpl();
    return simpleSelectStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectedColumns createSelectedColumns()
  {
    SelectedColumnsImpl selectedColumns = new SelectedColumnsImpl();
    return selectedColumns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhereClause createWhereClause()
  {
    WhereClauseImpl whereClause = new WhereClauseImpl();
    return whereClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanValue createBooleanValue()
  {
    BooleanValueImpl booleanValue = new BooleanValueImpl();
    return booleanValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberValue createNumberValue()
  {
    NumberValueImpl numberValue = new NumberValueImpl();
    return numberValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringValue createStringValue()
  {
    StringValueImpl stringValue = new StringValueImpl();
    return stringValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public R2RMLPackage getR2RMLPackage()
  {
    return (R2RMLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static R2RMLPackage getPackage()
  {
    return R2RMLPackage.eINSTANCE;
  }

} //R2RMLFactoryImpl
