/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.r2RML.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.r2RML.LogicalTable;
import org.xtext.example.mydsl.r2RML.PredicateObjectMap;
import org.xtext.example.mydsl.r2RML.R2RMLPackage;
import org.xtext.example.mydsl.r2RML.SubjectMap;
import org.xtext.example.mydsl.r2RML.TriplesMap;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Triples Map</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.r2RML.impl.TriplesMapImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.r2RML.impl.TriplesMapImpl#getLogicalTable <em>Logical Table</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.r2RML.impl.TriplesMapImpl#getSubjectMap <em>Subject Map</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.r2RML.impl.TriplesMapImpl#getPredicateObjectMaps <em>Predicate Object Maps</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TriplesMapImpl extends MinimalEObjectImpl.Container implements TriplesMap
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getLogicalTable() <em>Logical Table</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicalTable()
   * @generated
   * @ordered
   */
  protected LogicalTable logicalTable;

  /**
   * The cached value of the '{@link #getSubjectMap() <em>Subject Map</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubjectMap()
   * @generated
   * @ordered
   */
  protected SubjectMap subjectMap;

  /**
   * The cached value of the '{@link #getPredicateObjectMaps() <em>Predicate Object Maps</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredicateObjectMaps()
   * @generated
   * @ordered
   */
  protected EList<PredicateObjectMap> predicateObjectMaps;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TriplesMapImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return R2RMLPackage.Literals.TRIPLES_MAP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, R2RMLPackage.TRIPLES_MAP__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalTable getLogicalTable()
  {
    return logicalTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLogicalTable(LogicalTable newLogicalTable, NotificationChain msgs)
  {
    LogicalTable oldLogicalTable = logicalTable;
    logicalTable = newLogicalTable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, R2RMLPackage.TRIPLES_MAP__LOGICAL_TABLE, oldLogicalTable, newLogicalTable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLogicalTable(LogicalTable newLogicalTable)
  {
    if (newLogicalTable != logicalTable)
    {
      NotificationChain msgs = null;
      if (logicalTable != null)
        msgs = ((InternalEObject)logicalTable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - R2RMLPackage.TRIPLES_MAP__LOGICAL_TABLE, null, msgs);
      if (newLogicalTable != null)
        msgs = ((InternalEObject)newLogicalTable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - R2RMLPackage.TRIPLES_MAP__LOGICAL_TABLE, null, msgs);
      msgs = basicSetLogicalTable(newLogicalTable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, R2RMLPackage.TRIPLES_MAP__LOGICAL_TABLE, newLogicalTable, newLogicalTable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubjectMap getSubjectMap()
  {
    return subjectMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSubjectMap(SubjectMap newSubjectMap, NotificationChain msgs)
  {
    SubjectMap oldSubjectMap = subjectMap;
    subjectMap = newSubjectMap;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, R2RMLPackage.TRIPLES_MAP__SUBJECT_MAP, oldSubjectMap, newSubjectMap);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubjectMap(SubjectMap newSubjectMap)
  {
    if (newSubjectMap != subjectMap)
    {
      NotificationChain msgs = null;
      if (subjectMap != null)
        msgs = ((InternalEObject)subjectMap).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - R2RMLPackage.TRIPLES_MAP__SUBJECT_MAP, null, msgs);
      if (newSubjectMap != null)
        msgs = ((InternalEObject)newSubjectMap).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - R2RMLPackage.TRIPLES_MAP__SUBJECT_MAP, null, msgs);
      msgs = basicSetSubjectMap(newSubjectMap, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, R2RMLPackage.TRIPLES_MAP__SUBJECT_MAP, newSubjectMap, newSubjectMap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PredicateObjectMap> getPredicateObjectMaps()
  {
    if (predicateObjectMaps == null)
    {
      predicateObjectMaps = new EObjectContainmentEList<PredicateObjectMap>(PredicateObjectMap.class, this, R2RMLPackage.TRIPLES_MAP__PREDICATE_OBJECT_MAPS);
    }
    return predicateObjectMaps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case R2RMLPackage.TRIPLES_MAP__LOGICAL_TABLE:
        return basicSetLogicalTable(null, msgs);
      case R2RMLPackage.TRIPLES_MAP__SUBJECT_MAP:
        return basicSetSubjectMap(null, msgs);
      case R2RMLPackage.TRIPLES_MAP__PREDICATE_OBJECT_MAPS:
        return ((InternalEList<?>)getPredicateObjectMaps()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case R2RMLPackage.TRIPLES_MAP__NAME:
        return getName();
      case R2RMLPackage.TRIPLES_MAP__LOGICAL_TABLE:
        return getLogicalTable();
      case R2RMLPackage.TRIPLES_MAP__SUBJECT_MAP:
        return getSubjectMap();
      case R2RMLPackage.TRIPLES_MAP__PREDICATE_OBJECT_MAPS:
        return getPredicateObjectMaps();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case R2RMLPackage.TRIPLES_MAP__NAME:
        setName((String)newValue);
        return;
      case R2RMLPackage.TRIPLES_MAP__LOGICAL_TABLE:
        setLogicalTable((LogicalTable)newValue);
        return;
      case R2RMLPackage.TRIPLES_MAP__SUBJECT_MAP:
        setSubjectMap((SubjectMap)newValue);
        return;
      case R2RMLPackage.TRIPLES_MAP__PREDICATE_OBJECT_MAPS:
        getPredicateObjectMaps().clear();
        getPredicateObjectMaps().addAll((Collection<? extends PredicateObjectMap>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case R2RMLPackage.TRIPLES_MAP__NAME:
        setName(NAME_EDEFAULT);
        return;
      case R2RMLPackage.TRIPLES_MAP__LOGICAL_TABLE:
        setLogicalTable((LogicalTable)null);
        return;
      case R2RMLPackage.TRIPLES_MAP__SUBJECT_MAP:
        setSubjectMap((SubjectMap)null);
        return;
      case R2RMLPackage.TRIPLES_MAP__PREDICATE_OBJECT_MAPS:
        getPredicateObjectMaps().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case R2RMLPackage.TRIPLES_MAP__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case R2RMLPackage.TRIPLES_MAP__LOGICAL_TABLE:
        return logicalTable != null;
      case R2RMLPackage.TRIPLES_MAP__SUBJECT_MAP:
        return subjectMap != null;
      case R2RMLPackage.TRIPLES_MAP__PREDICATE_OBJECT_MAPS:
        return predicateObjectMaps != null && !predicateObjectMaps.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //TriplesMapImpl
