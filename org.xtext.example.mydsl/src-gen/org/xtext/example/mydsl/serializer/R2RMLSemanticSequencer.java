/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.r2RML.BooleanValue;
import org.xtext.example.mydsl.r2RML.Column;
import org.xtext.example.mydsl.r2RML.Condition;
import org.xtext.example.mydsl.r2RML.Constant;
import org.xtext.example.mydsl.r2RML.Datatype;
import org.xtext.example.mydsl.r2RML.LogicalTable;
import org.xtext.example.mydsl.r2RML.Mapping;
import org.xtext.example.mydsl.r2RML.NodeID;
import org.xtext.example.mydsl.r2RML.NumberValue;
import org.xtext.example.mydsl.r2RML.ObjectMap;
import org.xtext.example.mydsl.r2RML.Predicate;
import org.xtext.example.mydsl.r2RML.PredicateObjectMap;
import org.xtext.example.mydsl.r2RML.Prefix;
import org.xtext.example.mydsl.r2RML.Qname;
import org.xtext.example.mydsl.r2RML.R2RMLPackage;
import org.xtext.example.mydsl.r2RML.SelectedColumns;
import org.xtext.example.mydsl.r2RML.SimpleSelectStatement;
import org.xtext.example.mydsl.r2RML.Statement;
import org.xtext.example.mydsl.r2RML.StringValue;
import org.xtext.example.mydsl.r2RML.SubjectMap;
import org.xtext.example.mydsl.r2RML.Template;
import org.xtext.example.mydsl.r2RML.TriplesMap;
import org.xtext.example.mydsl.r2RML.WhereClause;
import org.xtext.example.mydsl.r2RML.iResource;
import org.xtext.example.mydsl.services.R2RMLGrammarAccess;

@SuppressWarnings("all")
public class R2RMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private R2RMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == R2RMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case R2RMLPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case R2RMLPackage.CLASS:
				sequence_Class(context, (org.xtext.example.mydsl.r2RML.Class) semanticObject); 
				return; 
			case R2RMLPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case R2RMLPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case R2RMLPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case R2RMLPackage.DATATYPE:
				sequence_Datatype(context, (Datatype) semanticObject); 
				return; 
			case R2RMLPackage.LOGICAL_TABLE:
				sequence_LogicalTable(context, (LogicalTable) semanticObject); 
				return; 
			case R2RMLPackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			case R2RMLPackage.NODE_ID:
				sequence_NodeID(context, (NodeID) semanticObject); 
				return; 
			case R2RMLPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case R2RMLPackage.OBJECT_MAP:
				sequence_ObjectMap(context, (ObjectMap) semanticObject); 
				return; 
			case R2RMLPackage.PREDICATE:
				sequence_Predicate(context, (Predicate) semanticObject); 
				return; 
			case R2RMLPackage.PREDICATE_OBJECT_MAP:
				sequence_PredicateObjectMap(context, (PredicateObjectMap) semanticObject); 
				return; 
			case R2RMLPackage.PREFIX:
				sequence_Prefix(context, (Prefix) semanticObject); 
				return; 
			case R2RMLPackage.QNAME:
				sequence_Qname(context, (Qname) semanticObject); 
				return; 
			case R2RMLPackage.SELECTED_COLUMNS:
				sequence_SelectedColumns(context, (SelectedColumns) semanticObject); 
				return; 
			case R2RMLPackage.SIMPLE_SELECT_STATEMENT:
				sequence_SimpleSelectStatement(context, (SimpleSelectStatement) semanticObject); 
				return; 
			case R2RMLPackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			case R2RMLPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case R2RMLPackage.SUBJECT_MAP:
				sequence_SubjectMap(context, (SubjectMap) semanticObject); 
				return; 
			case R2RMLPackage.TEMPLATE:
				sequence_Template(context, (Template) semanticObject); 
				return; 
			case R2RMLPackage.TRIPLES_MAP:
				sequence_TriplesMap(context, (TriplesMap) semanticObject); 
				return; 
			case R2RMLPackage.WHERE_CLAUSE:
				sequence_WhereClause(context, (WhereClause) semanticObject); 
				return; 
			case R2RMLPackage.IRESOURCE:
				sequence_iResource(context, (iResource) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 * </pre>
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Class returns Class
	 *
	 * Constraint:
	 *     className=Qname
	 * </pre>
	 */
	protected void sequence_Class(ISerializationContext context, org.xtext.example.mydsl.r2RML.Class semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.CLASS__CLASS_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.CLASS__CLASS_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassAccess().getClassNameQnameParserRuleCall_2_0(), semanticObject.getClassName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     name=QuotedString
	 * </pre>
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.COLUMN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.COLUMN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColumnAccess().getNameQuotedStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (column=ID operator=Operator value=Value)
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.CONDITION__COLUMN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.CONDITION__COLUMN));
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.CONDITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.CONDITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.CONDITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.CONDITION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getColumnIDTerminalRuleCall_0_0(), semanticObject.getColumn());
		feeder.accept(grammarAccess.getConditionAccess().getOperatorOperatorParserRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getConditionAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Constant returns Constant
	 *
	 * Constraint:
	 *     (constName=iResource | constStr=QuotedString)
	 * </pre>
	 */
	protected void sequence_Constant(ISerializationContext context, Constant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Datatype returns Datatype
	 *
	 * Constraint:
	 *     dtName=Qname
	 * </pre>
	 */
	protected void sequence_Datatype(ISerializationContext context, Datatype semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.DATATYPE__DT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.DATATYPE__DT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatatypeAccess().getDtNameQnameParserRuleCall_2_0(), semanticObject.getDtName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalTable returns LogicalTable
	 *
	 * Constraint:
	 *     (query=SimpleSelectStatement | tableName=STRING)
	 * </pre>
	 */
	protected void sequence_LogicalTable(ISerializationContext context, LogicalTable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Mapping returns Mapping
	 *
	 * Constraint:
	 *     statements+=Statement+
	 * </pre>
	 */
	protected void sequence_Mapping(ISerializationContext context, Mapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NodeID returns NodeID
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_NodeID(ISerializationContext context, NodeID semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.NODE_ID__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.NODE_ID__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNodeIDAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ObjectMap returns ObjectMap
	 *
	 * Constraint:
	 *     (column=Column? template=Template? constant=Constant? datatype=Datatype?)
	 * </pre>
	 */
	protected void sequence_ObjectMap(ISerializationContext context, ObjectMap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PredicateObjectMap returns PredicateObjectMap
	 *
	 * Constraint:
	 *     (predicate=Predicate objectMap=ObjectMap)
	 * </pre>
	 */
	protected void sequence_PredicateObjectMap(ISerializationContext context, PredicateObjectMap semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.PREDICATE_OBJECT_MAP__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.PREDICATE_OBJECT_MAP__PREDICATE));
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.PREDICATE_OBJECT_MAP__OBJECT_MAP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.PREDICATE_OBJECT_MAP__OBJECT_MAP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredicateObjectMapAccess().getPredicatePredicateParserRuleCall_3_0(), semanticObject.getPredicate());
		feeder.accept(grammarAccess.getPredicateObjectMapAccess().getObjectMapObjectMapParserRuleCall_4_0(), semanticObject.getObjectMap());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Predicate returns Predicate
	 *
	 * Constraint:
	 *     predicateName=Qname
	 * </pre>
	 */
	protected void sequence_Predicate(ISerializationContext context, Predicate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.PREDICATE__PREDICATE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.PREDICATE__PREDICATE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredicateAccess().getPredicateNameQnameParserRuleCall_2_0(), semanticObject.getPredicateName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Prefix returns Prefix
	 *
	 * Constraint:
	 *     (prefixName=PrefixName uri=URIREF)
	 * </pre>
	 */
	protected void sequence_Prefix(ISerializationContext context, Prefix semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.PREFIX__PREFIX_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.PREFIX__PREFIX_NAME));
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.PREFIX__URI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.PREFIX__URI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrefixAccess().getPrefixNamePrefixNameParserRuleCall_1_0(), semanticObject.getPrefixName());
		feeder.accept(grammarAccess.getPrefixAccess().getUriURIREFTerminalRuleCall_2_0(), semanticObject.getUri());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Qname returns Qname
	 *
	 * Constraint:
	 *     (prefixName=PrefixName name=ID?)
	 * </pre>
	 */
	protected void sequence_Qname(ISerializationContext context, Qname semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SelectedColumns returns SelectedColumns
	 *
	 * Constraint:
	 *     (columns+=ID columns+=ID*)
	 * </pre>
	 */
	protected void sequence_SelectedColumns(ISerializationContext context, SelectedColumns semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SimpleSelectStatement returns SimpleSelectStatement
	 *
	 * Constraint:
	 *     (selectedColumns=SelectedColumns tableName=ID whereClause=WhereClause?)
	 * </pre>
	 */
	protected void sequence_SimpleSelectStatement(ISerializationContext context, SimpleSelectStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns Statement
	 *
	 * Constraint:
	 *     (prefix=Prefix | triplesMap=TriplesMap)
	 * </pre>
	 */
	protected void sequence_Statement(ISerializationContext context, Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SubjectMap returns SubjectMap
	 *
	 * Constraint:
	 *     (template=Template class=Class?)
	 * </pre>
	 */
	protected void sequence_SubjectMap(ISerializationContext context, SubjectMap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Template returns Template
	 *
	 * Constraint:
	 *     name=QuotedString
	 * </pre>
	 */
	protected void sequence_Template(ISerializationContext context, Template semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, R2RMLPackage.Literals.TEMPLATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, R2RMLPackage.Literals.TEMPLATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTemplateAccess().getNameQuotedStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TriplesMap returns TriplesMap
	 *
	 * Constraint:
	 *     (name=URIREF logicalTable=LogicalTable subjectMap=SubjectMap? predicateObjectMaps+=PredicateObjectMap*)
	 * </pre>
	 */
	protected void sequence_TriplesMap(ISerializationContext context, TriplesMap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WhereClause returns WhereClause
	 *
	 * Constraint:
	 *     (conditions+=Condition (logic+=Logic conditions+=Condition)*)
	 * </pre>
	 */
	protected void sequence_WhereClause(ISerializationContext context, WhereClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     iResource returns iResource
	 *
	 * Constraint:
	 *     (uriRef=URIREF | qname=Qname)
	 * </pre>
	 */
	protected void sequence_iResource(ISerializationContext context, iResource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
