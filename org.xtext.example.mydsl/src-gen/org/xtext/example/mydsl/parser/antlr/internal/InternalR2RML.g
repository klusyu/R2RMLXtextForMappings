/*
 * generated by Xtext 2.33.0
 */
grammar InternalR2RML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.R2RMLGrammarAccess;

}

@parser::members {

 	private R2RMLGrammarAccess grammarAccess;

    public InternalR2RMLParser(TokenStream input, R2RMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Mapping";
   	}

   	@Override
   	protected R2RMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	iv_ruleMapping=ruleMapping
	{ $current=$iv_ruleMapping.current; }
	EOF;

// Rule Mapping
ruleMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMappingAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMappingRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"org.xtext.example.mydsl.R2RML.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getPrefixPrefixParserRuleCall_0_0_0());
					}
					lv_prefix_0_0=rulePrefix
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"prefix",
							lv_prefix_0_0,
							"org.xtext.example.mydsl.R2RML.Prefix");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getTriplesMapTriplesMapParserRuleCall_0_1_0());
					}
					lv_triplesMap_1_0=ruleTriplesMap
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"triplesMap",
							lv_triplesMap_1_0,
							"org.xtext.example.mydsl.R2RML.TriplesMap");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRulePrefix
entryRulePrefix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixRule()); }
	iv_rulePrefix=rulePrefix
	{ $current=$iv_rulePrefix.current; }
	EOF;

// Rule Prefix
rulePrefix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@prefix'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrefixAccess().getPrefixKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrefixAccess().getPrefixNamePrefixNameParserRuleCall_1_0());
				}
				lv_prefixName_1_0=rulePrefixName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrefixRule());
					}
					set(
						$current,
						"prefixName",
						lv_prefixName_1_0,
						"org.xtext.example.mydsl.R2RML.PrefixName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_uri_2_0=RULE_URIREF
				{
					newLeafNode(lv_uri_2_0, grammarAccess.getPrefixAccess().getUriURIREFTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrefixRule());
					}
					setWithLastConsumed(
						$current,
						"uri",
						lv_uri_2_0,
						"org.xtext.example.mydsl.R2RML.URIREF");
				}
			)
		)
	)
;

// Entry rule entryRuleTriplesMap
entryRuleTriplesMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriplesMapRule()); }
	iv_ruleTriplesMap=ruleTriplesMap
	{ $current=$iv_ruleTriplesMap.current; }
	EOF;

// Rule TriplesMap
ruleTriplesMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_URIREF
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTriplesMapAccess().getNameURIREFTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTriplesMapRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.example.mydsl.R2RML.URIREF");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTriplesMapAccess().getLogicalTableLogicalTableParserRuleCall_1_0());
				}
				lv_logicalTable_1_0=ruleLogicalTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriplesMapRule());
					}
					set(
						$current,
						"logicalTable",
						lv_logicalTable_1_0,
						"org.xtext.example.mydsl.R2RML.LogicalTable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTriplesMapAccess().getSubjectMapSubjectMapParserRuleCall_2_0());
				}
				lv_subjectMap_2_0=ruleSubjectMap
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriplesMapRule());
					}
					set(
						$current,
						"subjectMap",
						lv_subjectMap_2_0,
						"org.xtext.example.mydsl.R2RML.SubjectMap");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTriplesMapAccess().getPredicateObjectMapsPredicateObjectMapParserRuleCall_3_0());
				}
				lv_predicateObjectMaps_3_0=rulePredicateObjectMap
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriplesMapRule());
					}
					add(
						$current,
						"predicateObjectMaps",
						lv_predicateObjectMaps_3_0,
						"org.xtext.example.mydsl.R2RML.PredicateObjectMap");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleLogicalTable
entryRuleLogicalTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalTableRule()); }
	iv_ruleLogicalTable=ruleLogicalTable
	{ $current=$iv_ruleLogicalTable.current; }
	EOF;

// Rule LogicalTable
ruleLogicalTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalTableAccess().getPrefixNameParserRuleCall_0());
		}
		rulePrefixName
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='logicalTable'
		{
			newLeafNode(otherlv_1, grammarAccess.getLogicalTableAccess().getLogicalTableKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getLogicalTableAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicalTableAccess().getPrefixNameParserRuleCall_3_0_0());
				}
				rulePrefixName
				{
					afterParserOrEnumRuleCall();
				}
				otherlv_4='sqlQuery'
				{
					newLeafNode(otherlv_4, grammarAccess.getLogicalTableAccess().getSqlQueryKeyword_3_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLogicalTableAccess().getQuerySimpleSelectStatementParserRuleCall_3_0_2_0());
						}
						lv_query_5_0=ruleSimpleSelectStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLogicalTableRule());
							}
							set(
								$current,
								"query",
								lv_query_5_0,
								"org.xtext.example.mydsl.R2RML.SimpleSelectStatement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getLogicalTableAccess().getPrefixNameParserRuleCall_3_1_0());
				}
				rulePrefixName
				{
					afterParserOrEnumRuleCall();
				}
				otherlv_7='tableName'
				{
					newLeafNode(otherlv_7, grammarAccess.getLogicalTableAccess().getTableNameKeyword_3_1_1());
				}
				(
					(
						lv_tableName_8_0=RULE_STRING
						{
							newLeafNode(lv_tableName_8_0, grammarAccess.getLogicalTableAccess().getTableNameSTRINGTerminalRuleCall_3_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLogicalTableRule());
							}
							setWithLastConsumed(
								$current,
								"tableName",
								lv_tableName_8_0,
								"org.xtext.example.mydsl.R2RML.STRING");
						}
					)
				)
			)
		)
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getLogicalTableAccess().getRightSquareBracketKeyword_4());
		}
		(
			otherlv_10=';'
			{
				newLeafNode(otherlv_10, grammarAccess.getLogicalTableAccess().getSemicolonKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleSubjectMap
entryRuleSubjectMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubjectMapRule()); }
	iv_ruleSubjectMap=ruleSubjectMap
	{ $current=$iv_ruleSubjectMap.current; }
	EOF;

// Rule SubjectMap
ruleSubjectMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSubjectMapAccess().getPrefixNameParserRuleCall_0());
		}
		rulePrefixName
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='subjectMap'
		{
			newLeafNode(otherlv_1, grammarAccess.getSubjectMapAccess().getSubjectMapKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getSubjectMapAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubjectMapAccess().getTemplateTemplateParserRuleCall_3_0());
				}
				lv_template_3_0=ruleTemplate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubjectMapRule());
					}
					set(
						$current,
						"template",
						lv_template_3_0,
						"org.xtext.example.mydsl.R2RML.Template");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSubjectMapAccess().getClassClassParserRuleCall_4_0());
				}
				lv_class_4_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubjectMapRule());
					}
					set(
						$current,
						"class",
						lv_class_4_0,
						"org.xtext.example.mydsl.R2RML.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getSubjectMapAccess().getRightSquareBracketKeyword_5());
		}
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getSubjectMapAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRulePredicateObjectMap
entryRulePredicateObjectMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateObjectMapRule()); }
	iv_rulePredicateObjectMap=rulePredicateObjectMap
	{ $current=$iv_rulePredicateObjectMap.current; }
	EOF;

// Rule PredicateObjectMap
rulePredicateObjectMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPredicateObjectMapAccess().getPrefixNameParserRuleCall_0());
		}
		rulePrefixName
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='predicateObjectMap'
		{
			newLeafNode(otherlv_1, grammarAccess.getPredicateObjectMapAccess().getPredicateObjectMapKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getPredicateObjectMapAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateObjectMapAccess().getPredicatePredicateParserRuleCall_3_0());
				}
				lv_predicate_3_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateObjectMapRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_3_0,
						"org.xtext.example.mydsl.R2RML.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateObjectMapAccess().getObjectMapObjectMapParserRuleCall_4_0());
				}
				lv_objectMap_4_0=ruleObjectMap
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateObjectMapRule());
					}
					set(
						$current,
						"objectMap",
						lv_objectMap_4_0,
						"org.xtext.example.mydsl.R2RML.ObjectMap");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getPredicateObjectMapAccess().getRightSquareBracketKeyword_5());
		}
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getPredicateObjectMapAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleObjectMap
entryRuleObjectMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectMapRule()); }
	iv_ruleObjectMap=ruleObjectMap
	{ $current=$iv_ruleObjectMap.current; }
	EOF;

// Rule ObjectMap
ruleObjectMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObjectMapAccess().getObjectMapAction_0(),
					$current);
			}
		)
		{
			newCompositeNode(grammarAccess.getObjectMapAccess().getPrefixNameParserRuleCall_1());
		}
		rulePrefixName
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_2='objectMap'
		{
			newLeafNode(otherlv_2, grammarAccess.getObjectMapAccess().getObjectMapKeyword_2());
		}
		otherlv_3='['
		{
			newLeafNode(otherlv_3, grammarAccess.getObjectMapAccess().getLeftSquareBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectMapAccess().getColumnColumnParserRuleCall_4_0());
				}
				lv_column_4_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectMapRule());
					}
					set(
						$current,
						"column",
						lv_column_4_0,
						"org.xtext.example.mydsl.R2RML.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectMapAccess().getTemplateTemplateParserRuleCall_5_0());
				}
				lv_template_5_0=ruleTemplate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectMapRule());
					}
					set(
						$current,
						"template",
						lv_template_5_0,
						"org.xtext.example.mydsl.R2RML.Template");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectMapAccess().getConstantConstantParserRuleCall_6_0());
				}
				lv_constant_6_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectMapRule());
					}
					set(
						$current,
						"constant",
						lv_constant_6_0,
						"org.xtext.example.mydsl.R2RML.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectMapAccess().getDatatypeDatatypeParserRuleCall_7_0());
				}
				lv_datatype_7_0=ruleDatatype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectMapRule());
					}
					set(
						$current,
						"datatype",
						lv_datatype_7_0,
						"org.xtext.example.mydsl.R2RML.Datatype");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getObjectMapAccess().getRightSquareBracketKeyword_8());
		}
		(
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getObjectMapAccess().getSemicolonKeyword_9());
			}
		)?
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getClassAccess().getPrefixNameParserRuleCall_0());
		}
		rulePrefixName
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassAccess().getClassKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getClassNameQnameParserRuleCall_2_0());
				}
				lv_className_2_0=ruleQname
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"className",
						lv_className_2_0,
						"org.xtext.example.mydsl.R2RML.Qname");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getClassAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPredicateAccess().getPrefixNameParserRuleCall_0());
		}
		rulePrefixName
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='predicate'
		{
			newLeafNode(otherlv_1, grammarAccess.getPredicateAccess().getPredicateKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getPredicateNameQnameParserRuleCall_2_0());
				}
				lv_predicateName_2_0=ruleQname
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					set(
						$current,
						"predicateName",
						lv_predicateName_2_0,
						"org.xtext.example.mydsl.R2RML.Qname");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getPredicateAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleTemplate
entryRuleTemplate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemplateRule()); }
	iv_ruleTemplate=ruleTemplate
	{ $current=$iv_ruleTemplate.current; }
	EOF;

// Rule Template
ruleTemplate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTemplateAccess().getPrefixNameParserRuleCall_0());
		}
		rulePrefixName
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='template'
		{
			newLeafNode(otherlv_1, grammarAccess.getTemplateAccess().getTemplateKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTemplateAccess().getNameQuotedStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQuotedString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemplateRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.example.mydsl.R2RML.QuotedString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getTemplateAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getColumnAccess().getPrefixNameParserRuleCall_0());
		}
		rulePrefixName
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='column'
		{
			newLeafNode(otherlv_1, grammarAccess.getColumnAccess().getColumnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getNameQuotedStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQuotedString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.example.mydsl.R2RML.QuotedString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getColumnAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleDatatype
entryRuleDatatype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatatypeRule()); }
	iv_ruleDatatype=ruleDatatype
	{ $current=$iv_ruleDatatype.current; }
	EOF;

// Rule Datatype
ruleDatatype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDatatypeAccess().getPrefixNameParserRuleCall_0());
		}
		rulePrefixName
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='datatype'
		{
			newLeafNode(otherlv_1, grammarAccess.getDatatypeAccess().getDatatypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypeAccess().getDtNameQnameParserRuleCall_2_0());
				}
				lv_dtName_2_0=ruleQname
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypeRule());
					}
					set(
						$current,
						"dtName",
						lv_dtName_2_0,
						"org.xtext.example.mydsl.R2RML.Qname");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getDatatypeAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstantAccess().getPrefixNameParserRuleCall_0());
		}
		rulePrefixName
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='constant'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstantAccess().getConstantKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getConstNameIResourceParserRuleCall_2_0_0());
					}
					lv_constName_2_0=ruleiResource
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"constName",
							lv_constName_2_0,
							"org.xtext.example.mydsl.R2RML.iResource");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getConstStrQuotedStringParserRuleCall_2_1_0());
					}
					lv_constStr_3_0=ruleQuotedString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"constStr",
							lv_constStr_3_0,
							"org.xtext.example.mydsl.R2RML.QuotedString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getConstantAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleiResource
entryRuleiResource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIResourceRule()); }
	iv_ruleiResource=ruleiResource
	{ $current=$iv_ruleiResource.current; }
	EOF;

// Rule iResource
ruleiResource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_uriRef_0_0=RULE_URIREF
				{
					newLeafNode(lv_uriRef_0_0, grammarAccess.getIResourceAccess().getUriRefURIREFTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIResourceRule());
					}
					setWithLastConsumed(
						$current,
						"uriRef",
						lv_uriRef_0_0,
						"org.xtext.example.mydsl.R2RML.URIREF");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIResourceAccess().getQnameQnameParserRuleCall_1_0());
				}
				lv_qname_1_0=ruleQname
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIResourceRule());
					}
					set(
						$current,
						"qname",
						lv_qname_1_0,
						"org.xtext.example.mydsl.R2RML.Qname");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQname
entryRuleQname returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQnameRule()); }
	iv_ruleQname=ruleQname
	{ $current=$iv_ruleQname.current; }
	EOF;

// Rule Qname
ruleQname returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQnameAccess().getQnameAction_0(),
					$current);
			}
		)
		(
			((
				rulePrefixName
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getQnameAccess().getPrefixNamePrefixNameParserRuleCall_1_0());
				}
				lv_prefixName_1_0=rulePrefixName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQnameRule());
					}
					set(
						$current,
						"prefixName",
						lv_prefixName_1_0,
						"org.xtext.example.mydsl.R2RML.PrefixName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			((
				RULE_ID
			)
			)=>
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getQnameAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQnameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.example.mydsl.R2RML.ID");
				}
			)
		)?
	)
;

// Entry rule entryRulePrefixName
entryRulePrefixName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrefixNameRule()); }
	iv_rulePrefixName=rulePrefixName
	{ $current=$iv_rulePrefixName.current.getText(); }
	EOF;

// Rule PrefixName
rulePrefixName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getPrefixNameAccess().getIDTerminalRuleCall_0());
			}
		)?
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrefixNameAccess().getColonKeyword_1());
		}
	)
;

// Entry rule entryRuleQuotedString
entryRuleQuotedString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQuotedStringRule()); }
	iv_ruleQuotedString=ruleQuotedString
	{ $current=$iv_ruleQuotedString.current.getText(); }
	EOF;

// Rule QuotedString
ruleQuotedString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getQuotedStringAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleSimpleSelectStatement
entryRuleSimpleSelectStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleSelectStatementRule()); }
	iv_ruleSimpleSelectStatement=ruleSimpleSelectStatement
	{ $current=$iv_ruleSimpleSelectStatement.current; }
	EOF;

// Rule SimpleSelectStatement
ruleSimpleSelectStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SELECT'
		{
			newLeafNode(otherlv_0, grammarAccess.getSimpleSelectStatementAccess().getSELECTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleSelectStatementAccess().getSelectedColumnsSelectedColumnsParserRuleCall_1_0());
				}
				lv_selectedColumns_1_0=ruleSelectedColumns
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleSelectStatementRule());
					}
					set(
						$current,
						"selectedColumns",
						lv_selectedColumns_1_0,
						"org.xtext.example.mydsl.R2RML.SelectedColumns");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='FROM'
		{
			newLeafNode(otherlv_2, grammarAccess.getSimpleSelectStatementAccess().getFROMKeyword_2());
		}
		(
			(
				lv_tableName_3_0=RULE_ID
				{
					newLeafNode(lv_tableName_3_0, grammarAccess.getSimpleSelectStatementAccess().getTableNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleSelectStatementRule());
					}
					setWithLastConsumed(
						$current,
						"tableName",
						lv_tableName_3_0,
						"org.xtext.example.mydsl.R2RML.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_4_0());
				}
				lv_whereClause_4_0=ruleWhereClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleSelectStatementRule());
					}
					set(
						$current,
						"whereClause",
						lv_whereClause_4_0,
						"org.xtext.example.mydsl.R2RML.WhereClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSelectedColumns
entryRuleSelectedColumns returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectedColumnsRule()); }
	iv_ruleSelectedColumns=ruleSelectedColumns
	{ $current=$iv_ruleSelectedColumns.current; }
	EOF;

// Rule SelectedColumns
ruleSelectedColumns returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_columns_0_0=RULE_ID
				{
					newLeafNode(lv_columns_0_0, grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectedColumnsRule());
					}
					addWithLastConsumed(
						$current,
						"columns",
						lv_columns_0_0,
						"org.xtext.example.mydsl.R2RML.ID");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getSelectedColumnsAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_columns_2_0=RULE_ID
					{
						newLeafNode(lv_columns_2_0, grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectedColumnsRule());
						}
						addWithLastConsumed(
							$current,
							"columns",
							lv_columns_2_0,
							"org.xtext.example.mydsl.R2RML.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleWhereClause
entryRuleWhereClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhereClauseRule()); }
	iv_ruleWhereClause=ruleWhereClause
	{ $current=$iv_ruleWhereClause.current; }
	EOF;

// Rule WhereClause
ruleWhereClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='WHERE'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhereClauseAccess().getWHEREKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhereClauseAccess().getConditionsConditionParserRuleCall_1_0());
				}
				lv_conditions_1_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhereClauseRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_1_0,
						"org.xtext.example.mydsl.R2RML.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getWhereClauseAccess().getLogicLogicParserRuleCall_2_0_0());
					}
					lv_logic_2_0=ruleLogic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhereClauseRule());
						}
						add(
							$current,
							"logic",
							lv_logic_2_0,
							"org.xtext.example.mydsl.R2RML.Logic");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getWhereClauseAccess().getConditionsConditionParserRuleCall_2_1_0());
					}
					lv_conditions_3_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhereClauseRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_3_0,
							"org.xtext.example.mydsl.R2RML.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_column_0_0=RULE_ID
				{
					newLeafNode(lv_column_0_0, grammarAccess.getConditionAccess().getColumnIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_0_0,
						"org.xtext.example.mydsl.R2RML.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getOperatorOperatorParserRuleCall_1_0());
				}
				lv_operator_1_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"org.xtext.example.mydsl.R2RML.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.example.mydsl.R2RML.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLogic
entryRuleLogic returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicRule()); }
	iv_ruleLogic=ruleLogic
	{ $current=$iv_ruleLogic.current.getText(); }
	EOF;

// Rule Logic
ruleLogic returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='AND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicAccess().getANDKeyword_0());
		}
		    |
		kw='OR'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicAccess().getORKeyword_1());
		}
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current.getText(); }
	EOF;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='<>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_1());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignKeyword_2());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_0());
		}
		this_BooleanValue_0=ruleBooleanValue
		{
			$current = $this_BooleanValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getNumberValueParserRuleCall_1());
		}
		this_NumberValue_1=ruleNumberValue
		{
			$current = $this_NumberValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getStringValueParserRuleCall_2());
		}
		this_StringValue_2=ruleStringValue
		{
			$current = $this_StringValue_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	iv_ruleBooleanValue=ruleBooleanValue
	{ $current=$iv_ruleBooleanValue.current; }
	EOF;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_1='true'
				{
					newLeafNode(lv_value_0_1, grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValueRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_1, null);
				}
				    |
				lv_value_0_2='false'
				{
					newLeafNode(lv_value_0_2, grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValueRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberValueRule()); }
	iv_ruleNumberValue=ruleNumberValue
	{ $current=$iv_ruleNumberValue.current; }
	EOF;

// Rule NumberValue
ruleNumberValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtext.example.mydsl.R2RML.STRING");
			}
		)
	)
;

RULE_DOUBLE : ('-'|'+')? (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT|'.' ('0'..'9')+ RULE_EXPONENT|('0'..'9')+ RULE_EXPONENT);

RULE_DECIMAL : ('-'|'+')? (('0'..'9')+ '.' ('0'..'9')*|'.' ('0'..'9')+);

fragment RULE_EXPONENT : ('e'|'E') ('-'|'+')? ('0'..'9')+;

RULE_URIREF : '<' ( options {greedy=false;} : . )*'>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\''|'"""' ( options {greedy=false;} : . )*'"""');

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
