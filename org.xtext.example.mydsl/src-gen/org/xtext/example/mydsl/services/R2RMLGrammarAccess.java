/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class R2RMLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Mapping");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Mapping:
		//    statements+=Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPrefixAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPrefixPrefixParserRuleCall_0_0_0 = (RuleCall)cPrefixAssignment_0_0.eContents().get(0);
		private final Assignment cTriplesMapAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTriplesMapTriplesMapParserRuleCall_0_1_0 = (RuleCall)cTriplesMapAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Statement:
		//    (prefix=Prefix | triplesMap=TriplesMap) '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(prefix=Prefix | triplesMap=TriplesMap) '.'
		public Group getGroup() { return cGroup; }
		
		//(prefix=Prefix | triplesMap=TriplesMap)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//prefix=Prefix
		public Assignment getPrefixAssignment_0_0() { return cPrefixAssignment_0_0; }
		
		//Prefix
		public RuleCall getPrefixPrefixParserRuleCall_0_0_0() { return cPrefixPrefixParserRuleCall_0_0_0; }
		
		//triplesMap=TriplesMap
		public Assignment getTriplesMapAssignment_0_1() { return cTriplesMapAssignment_0_1; }
		
		//TriplesMap
		public RuleCall getTriplesMapTriplesMapParserRuleCall_0_1_0() { return cTriplesMapTriplesMapParserRuleCall_0_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPrefixNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixNamePrefixNameParserRuleCall_1_0 = (RuleCall)cPrefixNameAssignment_1.eContents().get(0);
		private final Assignment cUriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUriURIREFTerminalRuleCall_2_0 = (RuleCall)cUriAssignment_2.eContents().get(0);
		
		//Prefix:
		//    '@prefix' prefixName=PrefixName uri=URIREF
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@prefix' prefixName=PrefixName uri=URIREF
		public Group getGroup() { return cGroup; }
		
		//'@prefix'
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }
		
		//prefixName=PrefixName
		public Assignment getPrefixNameAssignment_1() { return cPrefixNameAssignment_1; }
		
		//PrefixName
		public RuleCall getPrefixNamePrefixNameParserRuleCall_1_0() { return cPrefixNamePrefixNameParserRuleCall_1_0; }
		
		//uri=URIREF
		public Assignment getUriAssignment_2() { return cUriAssignment_2; }
		
		//URIREF
		public RuleCall getUriURIREFTerminalRuleCall_2_0() { return cUriURIREFTerminalRuleCall_2_0; }
	}
	public class TriplesMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.TriplesMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameURIREFTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cLogicalTableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogicalTableLogicalTableParserRuleCall_1_0 = (RuleCall)cLogicalTableAssignment_1.eContents().get(0);
		private final Assignment cSubjectMapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubjectMapSubjectMapParserRuleCall_2_0 = (RuleCall)cSubjectMapAssignment_2.eContents().get(0);
		private final Assignment cPredicateObjectMapsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateObjectMapsPredicateObjectMapParserRuleCall_3_0 = (RuleCall)cPredicateObjectMapsAssignment_3.eContents().get(0);
		
		//TriplesMap:
		//    name=URIREF
		//        logicalTable=LogicalTable
		//        (subjectMap=SubjectMap)?
		//        (predicateObjectMaps+=PredicateObjectMap)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=URIREF
		//    logicalTable=LogicalTable
		//    (subjectMap=SubjectMap)?
		//    (predicateObjectMaps+=PredicateObjectMap)*
		public Group getGroup() { return cGroup; }
		
		//name=URIREF
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//URIREF
		public RuleCall getNameURIREFTerminalRuleCall_0_0() { return cNameURIREFTerminalRuleCall_0_0; }
		
		//logicalTable=LogicalTable
		public Assignment getLogicalTableAssignment_1() { return cLogicalTableAssignment_1; }
		
		//LogicalTable
		public RuleCall getLogicalTableLogicalTableParserRuleCall_1_0() { return cLogicalTableLogicalTableParserRuleCall_1_0; }
		
		//(subjectMap=SubjectMap)?
		public Assignment getSubjectMapAssignment_2() { return cSubjectMapAssignment_2; }
		
		//SubjectMap
		public RuleCall getSubjectMapSubjectMapParserRuleCall_2_0() { return cSubjectMapSubjectMapParserRuleCall_2_0; }
		
		//(predicateObjectMaps+=PredicateObjectMap)*
		public Assignment getPredicateObjectMapsAssignment_3() { return cPredicateObjectMapsAssignment_3; }
		
		//PredicateObjectMap
		public RuleCall getPredicateObjectMapsPredicateObjectMapParserRuleCall_3_0() { return cPredicateObjectMapsPredicateObjectMapParserRuleCall_3_0; }
	}
	public class LogicalTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.LogicalTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLogicalTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cPrefixNameParserRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Keyword cSqlQueryKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cQueryAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cQuerySimpleSelectStatementParserRuleCall_3_0_2_0 = (RuleCall)cQueryAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cPrefixNameParserRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Keyword cTableNameKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cTableNameAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cTableNameSTRINGTerminalRuleCall_3_1_2_0 = (RuleCall)cTableNameAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LogicalTable:
		//    PrefixName 'logicalTable' '['
		//        (PrefixName 'sqlQuery' query=SimpleSelectStatement | PrefixName 'tableName' tableName=STRING)
		//    ']' ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixName 'logicalTable' '['
		//    (PrefixName 'sqlQuery' query=SimpleSelectStatement | PrefixName 'tableName' tableName=STRING)
		//']' ';'?
		public Group getGroup() { return cGroup; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_0() { return cPrefixNameParserRuleCall_0; }
		
		//'logicalTable'
		public Keyword getLogicalTableKeyword_1() { return cLogicalTableKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//(PrefixName 'sqlQuery' query=SimpleSelectStatement | PrefixName 'tableName' tableName=STRING)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//PrefixName 'sqlQuery' query=SimpleSelectStatement
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_3_0_0() { return cPrefixNameParserRuleCall_3_0_0; }
		
		//'sqlQuery'
		public Keyword getSqlQueryKeyword_3_0_1() { return cSqlQueryKeyword_3_0_1; }
		
		//query=SimpleSelectStatement
		public Assignment getQueryAssignment_3_0_2() { return cQueryAssignment_3_0_2; }
		
		//SimpleSelectStatement
		public RuleCall getQuerySimpleSelectStatementParserRuleCall_3_0_2_0() { return cQuerySimpleSelectStatementParserRuleCall_3_0_2_0; }
		
		//PrefixName 'tableName' tableName=STRING
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_3_1_0() { return cPrefixNameParserRuleCall_3_1_0; }
		
		//'tableName'
		public Keyword getTableNameKeyword_3_1_1() { return cTableNameKeyword_3_1_1; }
		
		//tableName=STRING
		public Assignment getTableNameAssignment_3_1_2() { return cTableNameAssignment_3_1_2; }
		
		//STRING
		public RuleCall getTableNameSTRINGTerminalRuleCall_3_1_2_0() { return cTableNameSTRINGTerminalRuleCall_3_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SubjectMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.SubjectMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSubjectMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTemplateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTemplateTemplateParserRuleCall_3_0 = (RuleCall)cTemplateAssignment_3.eContents().get(0);
		private final Assignment cClassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassClassParserRuleCall_4_0 = (RuleCall)cClassAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SubjectMap:
		//    PrefixName 'subjectMap' '['
		//        template=Template
		//        (class=Class)?
		//    ']' ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixName 'subjectMap' '['
		//    template=Template
		//    (class=Class)?
		//']' ';'?
		public Group getGroup() { return cGroup; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_0() { return cPrefixNameParserRuleCall_0; }
		
		//'subjectMap'
		public Keyword getSubjectMapKeyword_1() { return cSubjectMapKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//template=Template
		public Assignment getTemplateAssignment_3() { return cTemplateAssignment_3; }
		
		//Template
		public RuleCall getTemplateTemplateParserRuleCall_3_0() { return cTemplateTemplateParserRuleCall_3_0; }
		
		//(class=Class)?
		public Assignment getClassAssignment_4() { return cClassAssignment_4; }
		
		//Class
		public RuleCall getClassClassParserRuleCall_4_0() { return cClassClassParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class PredicateObjectMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.PredicateObjectMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPredicateObjectMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicatePredicateParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Assignment cObjectMapAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectMapObjectMapParserRuleCall_4_0 = (RuleCall)cObjectMapAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PredicateObjectMap:
		//    PrefixName 'predicateObjectMap' '['
		//        predicate=Predicate
		//        objectMap=ObjectMap
		//    ']' ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixName 'predicateObjectMap' '['
		//    predicate=Predicate
		//    objectMap=ObjectMap
		//']' ';'?
		public Group getGroup() { return cGroup; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_0() { return cPrefixNameParserRuleCall_0; }
		
		//'predicateObjectMap'
		public Keyword getPredicateObjectMapKeyword_1() { return cPredicateObjectMapKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_3_0() { return cPredicatePredicateParserRuleCall_3_0; }
		
		//objectMap=ObjectMap
		public Assignment getObjectMapAssignment_4() { return cObjectMapAssignment_4; }
		
		//ObjectMap
		public RuleCall getObjectMapObjectMapParserRuleCall_4_0() { return cObjectMapObjectMapParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ObjectMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.ObjectMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectMapAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPrefixNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cObjectMapKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColumnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnColumnParserRuleCall_4_0 = (RuleCall)cColumnAssignment_4.eContents().get(0);
		private final Assignment cTemplateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTemplateTemplateParserRuleCall_5_0 = (RuleCall)cTemplateAssignment_5.eContents().get(0);
		private final Assignment cConstantAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstantConstantParserRuleCall_6_0 = (RuleCall)cConstantAssignment_6.eContents().get(0);
		private final Assignment cDatatypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDatatypeDatatypeParserRuleCall_7_0 = (RuleCall)cDatatypeAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ObjectMap:
		//    {ObjectMap} PrefixName 'objectMap' '['
		//        column=Column?
		//        template=Template?
		//        constant=Constant?
		//        datatype=Datatype?
		//    ']' ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectMap} PrefixName 'objectMap' '['
		//    column=Column?
		//    template=Template?
		//    constant=Constant?
		//    datatype=Datatype?
		//']' ';'?
		public Group getGroup() { return cGroup; }
		
		//{ObjectMap}
		public Action getObjectMapAction_0() { return cObjectMapAction_0; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_1() { return cPrefixNameParserRuleCall_1; }
		
		//'objectMap'
		public Keyword getObjectMapKeyword_2() { return cObjectMapKeyword_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//column=Column?
		public Assignment getColumnAssignment_4() { return cColumnAssignment_4; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_4_0() { return cColumnColumnParserRuleCall_4_0; }
		
		//template=Template?
		public Assignment getTemplateAssignment_5() { return cTemplateAssignment_5; }
		
		//Template
		public RuleCall getTemplateTemplateParserRuleCall_5_0() { return cTemplateTemplateParserRuleCall_5_0; }
		
		//constant=Constant?
		public Assignment getConstantAssignment_6() { return cConstantAssignment_6; }
		
		//Constant
		public RuleCall getConstantConstantParserRuleCall_6_0() { return cConstantConstantParserRuleCall_6_0; }
		
		//datatype=Datatype?
		public Assignment getDatatypeAssignment_7() { return cDatatypeAssignment_7; }
		
		//Datatype
		public RuleCall getDatatypeDatatypeParserRuleCall_7_0() { return cDatatypeDatatypeParserRuleCall_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//';'?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameQnameParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Additional entities that can be referenced
		//Class:
		//    PrefixName 'class' className=Qname ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixName 'class' className=Qname ';'?
		public Group getGroup() { return cGroup; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_0() { return cPrefixNameParserRuleCall_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//className=Qname
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }
		
		//Qname
		public RuleCall getClassNameQnameParserRuleCall_2_0() { return cClassNameQnameParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPredicateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicateNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateNameQnameParserRuleCall_2_0 = (RuleCall)cPredicateNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Predicate:
		//    PrefixName 'predicate' predicateName=Qname ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixName 'predicate' predicateName=Qname ';'?
		public Group getGroup() { return cGroup; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_0() { return cPrefixNameParserRuleCall_0; }
		
		//'predicate'
		public Keyword getPredicateKeyword_1() { return cPredicateKeyword_1; }
		
		//predicateName=Qname
		public Assignment getPredicateNameAssignment_2() { return cPredicateNameAssignment_2; }
		
		//Qname
		public RuleCall getPredicateNameQnameParserRuleCall_2_0() { return cPredicateNameQnameParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cTemplateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQuotedStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Template:
		//    PrefixName 'template' name=QuotedString ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixName 'template' name=QuotedString ';'?
		public Group getGroup() { return cGroup; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_0() { return cPrefixNameParserRuleCall_0; }
		
		//'template'
		public Keyword getTemplateKeyword_1() { return cTemplateKeyword_1; }
		
		//name=QuotedString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QuotedString
		public RuleCall getNameQuotedStringParserRuleCall_2_0() { return cNameQuotedStringParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColumnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQuotedStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Column:
		//    PrefixName 'column' name=QuotedString ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixName 'column' name=QuotedString ';'?
		public Group getGroup() { return cGroup; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_0() { return cPrefixNameParserRuleCall_0; }
		
		//'column'
		public Keyword getColumnKeyword_1() { return cColumnKeyword_1; }
		
		//name=QuotedString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QuotedString
		public RuleCall getNameQuotedStringParserRuleCall_2_0() { return cNameQuotedStringParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Datatype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDatatypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDtNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDtNameQnameParserRuleCall_2_0 = (RuleCall)cDtNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Datatype:
		//    PrefixName 'datatype' dtName=Qname ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixName 'datatype' dtName=Qname ';'?
		public Group getGroup() { return cGroup; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_0() { return cPrefixNameParserRuleCall_0; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_1() { return cDatatypeKeyword_1; }
		
		//dtName=Qname
		public Assignment getDtNameAssignment_2() { return cDtNameAssignment_2; }
		
		//Qname
		public RuleCall getDtNameQnameParserRuleCall_2_0() { return cDtNameQnameParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConstNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cConstNameIResourceParserRuleCall_2_0_0 = (RuleCall)cConstNameAssignment_2_0.eContents().get(0);
		private final Assignment cConstStrAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cConstStrQuotedStringParserRuleCall_2_1_0 = (RuleCall)cConstStrAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Constant:
		//    PrefixName 'constant' (constName=iResource | constStr=QuotedString) ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixName 'constant' (constName=iResource | constStr=QuotedString) ';'?
		public Group getGroup() { return cGroup; }
		
		//PrefixName
		public RuleCall getPrefixNameParserRuleCall_0() { return cPrefixNameParserRuleCall_0; }
		
		//'constant'
		public Keyword getConstantKeyword_1() { return cConstantKeyword_1; }
		
		//(constName=iResource | constStr=QuotedString)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//constName=iResource
		public Assignment getConstNameAssignment_2_0() { return cConstNameAssignment_2_0; }
		
		//iResource
		public RuleCall getConstNameIResourceParserRuleCall_2_0_0() { return cConstNameIResourceParserRuleCall_2_0_0; }
		
		//constStr=QuotedString
		public Assignment getConstStrAssignment_2_1() { return cConstStrAssignment_2_1; }
		
		//QuotedString
		public RuleCall getConstStrQuotedStringParserRuleCall_2_1_0() { return cConstStrQuotedStringParserRuleCall_2_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class IResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.iResource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUriRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUriRefURIREFTerminalRuleCall_0_0 = (RuleCall)cUriRefAssignment_0.eContents().get(0);
		private final Assignment cQnameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cQnameQnameParserRuleCall_1_0 = (RuleCall)cQnameAssignment_1.eContents().get(0);
		
		//iResource:
		//    uriRef=URIREF | qname=Qname
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//uriRef=URIREF | qname=Qname
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//uriRef=URIREF
		public Assignment getUriRefAssignment_0() { return cUriRefAssignment_0; }
		
		//URIREF
		public RuleCall getUriRefURIREFTerminalRuleCall_0_0() { return cUriRefURIREFTerminalRuleCall_0_0; }
		
		//qname=Qname
		public Assignment getQnameAssignment_1() { return cQnameAssignment_1; }
		
		//Qname
		public RuleCall getQnameQnameParserRuleCall_1_0() { return cQnameQnameParserRuleCall_1_0; }
	}
	public class NodeIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.NodeID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NodeID:
		//    '_:' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'_:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'_:'
		public Keyword get_Keyword_0() { return c_Keyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class QnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Qname");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQnameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPrefixNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixNamePrefixNameParserRuleCall_1_0 = (RuleCall)cPrefixNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Qname:
		//    {Qname} =>prefixName=PrefixName =>name=ID?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Qname} =>prefixName=PrefixName =>name=ID?
		public Group getGroup() { return cGroup; }
		
		//{Qname}
		public Action getQnameAction_0() { return cQnameAction_0; }
		
		//=>prefixName=PrefixName
		public Assignment getPrefixNameAssignment_1() { return cPrefixNameAssignment_1; }
		
		//PrefixName
		public RuleCall getPrefixNamePrefixNameParserRuleCall_1_0() { return cPrefixNamePrefixNameParserRuleCall_1_0; }
		
		//=>name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class PrefixNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.PrefixName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrefixName returns ecore::EString:
		//    ID? ':'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID? ':'
		public Group getGroup() { return cGroup; }
		
		//ID?
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}
	public class QuotedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.QuotedString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//QuotedString returns ecore::EString:
		//    STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class SimpleSelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.SimpleSelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectedColumnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectedColumnsSelectedColumnsParserRuleCall_1_0 = (RuleCall)cSelectedColumnsAssignment_1.eContents().get(0);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTableNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTableNameIDTerminalRuleCall_3_0 = (RuleCall)cTableNameAssignment_3.eContents().get(0);
		private final Assignment cWhereClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_4_0 = (RuleCall)cWhereClauseAssignment_4.eContents().get(0);
		
		/////////////////// SQLQuery /////////////////
		//SimpleSelectStatement:
		//    'SELECT' selectedColumns=SelectedColumns 'FROM' tableName=ID (whereClause=WhereClause)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SELECT' selectedColumns=SelectedColumns 'FROM' tableName=ID (whereClause=WhereClause)?
		public Group getGroup() { return cGroup; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//selectedColumns=SelectedColumns
		public Assignment getSelectedColumnsAssignment_1() { return cSelectedColumnsAssignment_1; }
		
		//SelectedColumns
		public RuleCall getSelectedColumnsSelectedColumnsParserRuleCall_1_0() { return cSelectedColumnsSelectedColumnsParserRuleCall_1_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }
		
		//tableName=ID
		public Assignment getTableNameAssignment_3() { return cTableNameAssignment_3; }
		
		//ID
		public RuleCall getTableNameIDTerminalRuleCall_3_0() { return cTableNameIDTerminalRuleCall_3_0; }
		
		//(whereClause=WhereClause)?
		public Assignment getWhereClauseAssignment_4() { return cWhereClauseAssignment_4; }
		
		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_4_0() { return cWhereClauseWhereClauseParserRuleCall_4_0; }
	}
	public class SelectedColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.SelectedColumns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnsIDTerminalRuleCall_0_0 = (RuleCall)cColumnsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cColumnsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColumnsIDTerminalRuleCall_1_1_0 = (RuleCall)cColumnsAssignment_1_1.eContents().get(0);
		
		//SelectedColumns:
		//    columns+=ID (',' columns+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//columns+=ID (',' columns+=ID)*
		public Group getGroup() { return cGroup; }
		
		//columns+=ID
		public Assignment getColumnsAssignment_0() { return cColumnsAssignment_0; }
		
		//ID
		public RuleCall getColumnsIDTerminalRuleCall_0_0() { return cColumnsIDTerminalRuleCall_0_0; }
		
		//(',' columns+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//columns+=ID
		public Assignment getColumnsAssignment_1_1() { return cColumnsAssignment_1_1; }
		
		//ID
		public RuleCall getColumnsIDTerminalRuleCall_1_1_0() { return cColumnsIDTerminalRuleCall_1_1_0; }
	}
	public class WhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.WhereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_1_0 = (RuleCall)cConditionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLogicAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLogicLogicParserRuleCall_2_0_0 = (RuleCall)cLogicAssignment_2_0.eContents().get(0);
		private final Assignment cConditionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_2_1_0 = (RuleCall)cConditionsAssignment_2_1.eContents().get(0);
		
		//WhereClause:
		//    'WHERE' conditions+=Condition (logic+=Logic conditions+=Condition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'WHERE' conditions+=Condition (logic+=Logic conditions+=Condition)*
		public Group getGroup() { return cGroup; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_1() { return cConditionsAssignment_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_1_0() { return cConditionsConditionParserRuleCall_1_0; }
		
		//(logic+=Logic conditions+=Condition)*
		public Group getGroup_2() { return cGroup_2; }
		
		//logic+=Logic
		public Assignment getLogicAssignment_2_0() { return cLogicAssignment_2_0; }
		
		//Logic
		public RuleCall getLogicLogicParserRuleCall_2_0_0() { return cLogicLogicParserRuleCall_2_0_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_2_1() { return cConditionsAssignment_2_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_1_0() { return cConditionsConditionParserRuleCall_2_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnIDTerminalRuleCall_0_0 = (RuleCall)cColumnAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Condition:
		//    column=ID operator=Operator value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//column=ID operator=Operator value=Value
		public Group getGroup() { return cGroup; }
		
		//column=ID
		public Assignment getColumnAssignment_0() { return cColumnAssignment_0; }
		
		//ID
		public RuleCall getColumnIDTerminalRuleCall_0_0() { return cColumnIDTerminalRuleCall_0_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_0() { return cOperatorOperatorParserRuleCall_1_0; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class LogicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Logic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cANDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cORKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Logic:
		//    'AND' | 'OR';
		@Override public ParserRule getRule() { return rule; }
		
		//'AND' | 'OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'AND'
		public Keyword getANDKeyword_0() { return cANDKeyword_0; }
		
		//'OR'
		public Keyword getORKeyword_1() { return cORKeyword_1; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Operator:
		//    '=' | '<>' | '<' | '<=' | '>' | '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '<>' | '<' | '<=' | '>' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_1() { return cLessThanSignGreaterThanSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//    BooleanValue | NumberValue | StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanValue | NumberValue | StringValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_0() { return cBooleanValueParserRuleCall_0; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_1() { return cNumberValueParserRuleCall_1; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanValue:
		//    value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberValue:
		//    value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//    value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	
	
	private final MappingElements pMapping;
	private final StatementElements pStatement;
	private final PrefixElements pPrefix;
	private final TriplesMapElements pTriplesMap;
	private final LogicalTableElements pLogicalTable;
	private final SubjectMapElements pSubjectMap;
	private final PredicateObjectMapElements pPredicateObjectMap;
	private final ObjectMapElements pObjectMap;
	private final ClassElements pClass;
	private final PredicateElements pPredicate;
	private final TemplateElements pTemplate;
	private final ColumnElements pColumn;
	private final DatatypeElements pDatatype;
	private final ConstantElements pConstant;
	private final IResourceElements pIResource;
	private final NodeIDElements pNodeID;
	private final QnameElements pQname;
	private final PrefixNameElements pPrefixName;
	private final QuotedStringElements pQuotedString;
	private final SimpleSelectStatementElements pSimpleSelectStatement;
	private final SelectedColumnsElements pSelectedColumns;
	private final WhereClauseElements pWhereClause;
	private final ConditionElements pCondition;
	private final LogicElements pLogic;
	private final OperatorElements pOperator;
	private final ValueElements pValue;
	private final BooleanValueElements pBooleanValue;
	private final NumberValueElements pNumberValue;
	private final StringValueElements pStringValue;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tURIREF;
	private final TerminalRule tID;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public R2RMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMapping = new MappingElements();
		this.pStatement = new StatementElements();
		this.pPrefix = new PrefixElements();
		this.pTriplesMap = new TriplesMapElements();
		this.pLogicalTable = new LogicalTableElements();
		this.pSubjectMap = new SubjectMapElements();
		this.pPredicateObjectMap = new PredicateObjectMapElements();
		this.pObjectMap = new ObjectMapElements();
		this.pClass = new ClassElements();
		this.pPredicate = new PredicateElements();
		this.pTemplate = new TemplateElements();
		this.pColumn = new ColumnElements();
		this.pDatatype = new DatatypeElements();
		this.pConstant = new ConstantElements();
		this.pIResource = new IResourceElements();
		this.pNodeID = new NodeIDElements();
		this.pQname = new QnameElements();
		this.pPrefixName = new PrefixNameElements();
		this.pQuotedString = new QuotedStringElements();
		this.pSimpleSelectStatement = new SimpleSelectStatementElements();
		this.pSelectedColumns = new SelectedColumnsElements();
		this.pWhereClause = new WhereClauseElements();
		this.pCondition = new ConditionElements();
		this.pLogic = new LogicElements();
		this.pOperator = new OperatorElements();
		this.pValue = new ValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pStringValue = new StringValueElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.DOUBLE");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.DECIMAL");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.EXPONENT");
		this.tURIREF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.URIREF");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.ID");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.SL_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.R2RML.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.R2RML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Mapping:
	//    statements+=Statement*
	//;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//Statement:
	//    (prefix=Prefix | triplesMap=TriplesMap) '.'
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Prefix:
	//    '@prefix' prefixName=PrefixName uri=URIREF
	//;
	public PrefixElements getPrefixAccess() {
		return pPrefix;
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}
	
	//TriplesMap:
	//    name=URIREF
	//        logicalTable=LogicalTable
	//        (subjectMap=SubjectMap)?
	//        (predicateObjectMaps+=PredicateObjectMap)*
	//;
	public TriplesMapElements getTriplesMapAccess() {
		return pTriplesMap;
	}
	
	public ParserRule getTriplesMapRule() {
		return getTriplesMapAccess().getRule();
	}
	
	//LogicalTable:
	//    PrefixName 'logicalTable' '['
	//        (PrefixName 'sqlQuery' query=SimpleSelectStatement | PrefixName 'tableName' tableName=STRING)
	//    ']' ';'?
	//;
	public LogicalTableElements getLogicalTableAccess() {
		return pLogicalTable;
	}
	
	public ParserRule getLogicalTableRule() {
		return getLogicalTableAccess().getRule();
	}
	
	//SubjectMap:
	//    PrefixName 'subjectMap' '['
	//        template=Template
	//        (class=Class)?
	//    ']' ';'?
	//;
	public SubjectMapElements getSubjectMapAccess() {
		return pSubjectMap;
	}
	
	public ParserRule getSubjectMapRule() {
		return getSubjectMapAccess().getRule();
	}
	
	//PredicateObjectMap:
	//    PrefixName 'predicateObjectMap' '['
	//        predicate=Predicate
	//        objectMap=ObjectMap
	//    ']' ';'?
	//;
	public PredicateObjectMapElements getPredicateObjectMapAccess() {
		return pPredicateObjectMap;
	}
	
	public ParserRule getPredicateObjectMapRule() {
		return getPredicateObjectMapAccess().getRule();
	}
	
	//ObjectMap:
	//    {ObjectMap} PrefixName 'objectMap' '['
	//        column=Column?
	//        template=Template?
	//        constant=Constant?
	//        datatype=Datatype?
	//    ']' ';'?
	//;
	public ObjectMapElements getObjectMapAccess() {
		return pObjectMap;
	}
	
	public ParserRule getObjectMapRule() {
		return getObjectMapAccess().getRule();
	}
	
	//// Additional entities that can be referenced
	//Class:
	//    PrefixName 'class' className=Qname ';'?;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Predicate:
	//    PrefixName 'predicate' predicateName=Qname ';'?;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//Template:
	//    PrefixName 'template' name=QuotedString ';'?
	//;
	public TemplateElements getTemplateAccess() {
		return pTemplate;
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}
	
	//Column:
	//    PrefixName 'column' name=QuotedString ';'?
	//;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//Datatype:
	//    PrefixName 'datatype' dtName=Qname ';'?;
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}
	
	//Constant:
	//    PrefixName 'constant' (constName=iResource | constStr=QuotedString) ';'?
	//;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//iResource:
	//    uriRef=URIREF | qname=Qname
	//;
	public IResourceElements getIResourceAccess() {
		return pIResource;
	}
	
	public ParserRule getIResourceRule() {
		return getIResourceAccess().getRule();
	}
	
	//NodeID:
	//    '_:' name=ID
	//;
	public NodeIDElements getNodeIDAccess() {
		return pNodeID;
	}
	
	public ParserRule getNodeIDRule() {
		return getNodeIDAccess().getRule();
	}
	
	//Qname:
	//    {Qname} =>prefixName=PrefixName =>name=ID?
	//;
	public QnameElements getQnameAccess() {
		return pQname;
	}
	
	public ParserRule getQnameRule() {
		return getQnameAccess().getRule();
	}
	
	//PrefixName returns ecore::EString:
	//    ID? ':'
	//;
	public PrefixNameElements getPrefixNameAccess() {
		return pPrefixName;
	}
	
	public ParserRule getPrefixNameRule() {
		return getPrefixNameAccess().getRule();
	}
	
	//QuotedString returns ecore::EString:
	//    STRING
	//;
	public QuotedStringElements getQuotedStringAccess() {
		return pQuotedString;
	}
	
	public ParserRule getQuotedStringRule() {
		return getQuotedStringAccess().getRule();
	}
	
	/////////////////// SQLQuery /////////////////
	//SimpleSelectStatement:
	//    'SELECT' selectedColumns=SelectedColumns 'FROM' tableName=ID (whereClause=WhereClause)?;
	public SimpleSelectStatementElements getSimpleSelectStatementAccess() {
		return pSimpleSelectStatement;
	}
	
	public ParserRule getSimpleSelectStatementRule() {
		return getSimpleSelectStatementAccess().getRule();
	}
	
	//SelectedColumns:
	//    columns+=ID (',' columns+=ID)*;
	public SelectedColumnsElements getSelectedColumnsAccess() {
		return pSelectedColumns;
	}
	
	public ParserRule getSelectedColumnsRule() {
		return getSelectedColumnsAccess().getRule();
	}
	
	//WhereClause:
	//    'WHERE' conditions+=Condition (logic+=Logic conditions+=Condition)*;
	public WhereClauseElements getWhereClauseAccess() {
		return pWhereClause;
	}
	
	public ParserRule getWhereClauseRule() {
		return getWhereClauseAccess().getRule();
	}
	
	//Condition:
	//    column=ID operator=Operator value=Value;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Logic:
	//    'AND' | 'OR';
	public LogicElements getLogicAccess() {
		return pLogic;
	}
	
	public ParserRule getLogicRule() {
		return getLogicAccess().getRule();
	}
	
	//Operator:
	//    '=' | '<>' | '<' | '<=' | '>' | '>=';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Value:
	//    BooleanValue | NumberValue | StringValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//BooleanValue:
	//    value=('true' | 'false');
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//NumberValue:
	//    value=INT;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	//StringValue:
	//    value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	/////////////////// SQLQuery end /////////////////
	//terminal DOUBLE:
	//    ('-' | '+')? (('0'..'9')+ '.' ('0'..'9')* EXPONENT | '.' ('0'..'9')+ EXPONENT | ('0'..'9')+ EXPONENT)
	//;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal DECIMAL:
	//    ('-'|'+')? (('0'..'9')+ '.' ('0'..'9')* | '.' ('0'..'9')+)
	//;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal EXPONENT:
	//    ('e' | 'E') ('-'|'+')? ('0'..'9')+
	//;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal URIREF returns ecore::EString:
	//    '<' -> '>'
	//;
	public TerminalRule getURIREFRule() {
		return tURIREF;
	}
	
	//@Override
	//terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal SL_COMMENT : '#' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@Override
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'" |
	//            '"""' -> '"""'
	//        ;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
