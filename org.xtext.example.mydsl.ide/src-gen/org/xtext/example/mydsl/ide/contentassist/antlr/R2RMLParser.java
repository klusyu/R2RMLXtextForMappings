/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalR2RMLParser;
import org.xtext.example.mydsl.services.R2RMLGrammarAccess;

public class R2RMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(R2RMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, R2RMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives_0(), "rule__Statement__Alternatives_0");
			builder.put(grammarAccess.getLogicalTableAccess().getAlternatives_3(), "rule__LogicalTable__Alternatives_3");
			builder.put(grammarAccess.getConstantAccess().getAlternatives_2(), "rule__Constant__Alternatives_2");
			builder.put(grammarAccess.getIResourceAccess().getAlternatives(), "rule__IResource__Alternatives");
			builder.put(grammarAccess.getLogicAccess().getAlternatives(), "rule__Logic__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAlternatives_0(), "rule__BooleanValue__ValueAlternatives_0");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getPrefixAccess().getGroup(), "rule__Prefix__Group__0");
			builder.put(grammarAccess.getTriplesMapAccess().getGroup(), "rule__TriplesMap__Group__0");
			builder.put(grammarAccess.getLogicalTableAccess().getGroup(), "rule__LogicalTable__Group__0");
			builder.put(grammarAccess.getLogicalTableAccess().getGroup_3_0(), "rule__LogicalTable__Group_3_0__0");
			builder.put(grammarAccess.getLogicalTableAccess().getGroup_3_1(), "rule__LogicalTable__Group_3_1__0");
			builder.put(grammarAccess.getSubjectMapAccess().getGroup(), "rule__SubjectMap__Group__0");
			builder.put(grammarAccess.getPredicateObjectMapAccess().getGroup(), "rule__PredicateObjectMap__Group__0");
			builder.put(grammarAccess.getObjectMapAccess().getGroup(), "rule__ObjectMap__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
			builder.put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
			builder.put(grammarAccess.getTemplateAccess().getGroup(), "rule__Template__Group__0");
			builder.put(grammarAccess.getColumnAccess().getGroup(), "rule__Column__Group__0");
			builder.put(grammarAccess.getDatatypeAccess().getGroup(), "rule__Datatype__Group__0");
			builder.put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
			builder.put(grammarAccess.getNodeIDAccess().getGroup(), "rule__NodeID__Group__0");
			builder.put(grammarAccess.getQnameAccess().getGroup(), "rule__Qname__Group__0");
			builder.put(grammarAccess.getPrefixNameAccess().getGroup(), "rule__PrefixName__Group__0");
			builder.put(grammarAccess.getSimpleSelectStatementAccess().getGroup(), "rule__SimpleSelectStatement__Group__0");
			builder.put(grammarAccess.getSelectedColumnsAccess().getGroup(), "rule__SelectedColumns__Group__0");
			builder.put(grammarAccess.getSelectedColumnsAccess().getGroup_1(), "rule__SelectedColumns__Group_1__0");
			builder.put(grammarAccess.getWhereClauseAccess().getGroup(), "rule__WhereClause__Group__0");
			builder.put(grammarAccess.getWhereClauseAccess().getGroup_2(), "rule__WhereClause__Group_2__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getMappingAccess().getStatementsAssignment(), "rule__Mapping__StatementsAssignment");
			builder.put(grammarAccess.getStatementAccess().getPrefixAssignment_0_0(), "rule__Statement__PrefixAssignment_0_0");
			builder.put(grammarAccess.getStatementAccess().getTriplesMapAssignment_0_1(), "rule__Statement__TriplesMapAssignment_0_1");
			builder.put(grammarAccess.getPrefixAccess().getPrefixNameAssignment_1(), "rule__Prefix__PrefixNameAssignment_1");
			builder.put(grammarAccess.getPrefixAccess().getUriAssignment_2(), "rule__Prefix__UriAssignment_2");
			builder.put(grammarAccess.getTriplesMapAccess().getNameAssignment_0(), "rule__TriplesMap__NameAssignment_0");
			builder.put(grammarAccess.getTriplesMapAccess().getLogicalTableAssignment_1(), "rule__TriplesMap__LogicalTableAssignment_1");
			builder.put(grammarAccess.getTriplesMapAccess().getSubjectMapAssignment_2(), "rule__TriplesMap__SubjectMapAssignment_2");
			builder.put(grammarAccess.getTriplesMapAccess().getPredicateObjectMapsAssignment_3(), "rule__TriplesMap__PredicateObjectMapsAssignment_3");
			builder.put(grammarAccess.getLogicalTableAccess().getQueryAssignment_3_0_2(), "rule__LogicalTable__QueryAssignment_3_0_2");
			builder.put(grammarAccess.getLogicalTableAccess().getTableNameAssignment_3_1_2(), "rule__LogicalTable__TableNameAssignment_3_1_2");
			builder.put(grammarAccess.getSubjectMapAccess().getTemplateAssignment_3(), "rule__SubjectMap__TemplateAssignment_3");
			builder.put(grammarAccess.getSubjectMapAccess().getClassAssignment_4(), "rule__SubjectMap__ClassAssignment_4");
			builder.put(grammarAccess.getPredicateObjectMapAccess().getPredicateAssignment_3(), "rule__PredicateObjectMap__PredicateAssignment_3");
			builder.put(grammarAccess.getPredicateObjectMapAccess().getObjectMapAssignment_4(), "rule__PredicateObjectMap__ObjectMapAssignment_4");
			builder.put(grammarAccess.getObjectMapAccess().getColumnAssignment_4(), "rule__ObjectMap__ColumnAssignment_4");
			builder.put(grammarAccess.getObjectMapAccess().getTemplateAssignment_5(), "rule__ObjectMap__TemplateAssignment_5");
			builder.put(grammarAccess.getObjectMapAccess().getConstantAssignment_6(), "rule__ObjectMap__ConstantAssignment_6");
			builder.put(grammarAccess.getObjectMapAccess().getDatatypeAssignment_7(), "rule__ObjectMap__DatatypeAssignment_7");
			builder.put(grammarAccess.getClassAccess().getClassNameAssignment_2(), "rule__Class__ClassNameAssignment_2");
			builder.put(grammarAccess.getPredicateAccess().getPredicateNameAssignment_2(), "rule__Predicate__PredicateNameAssignment_2");
			builder.put(grammarAccess.getTemplateAccess().getNameAssignment_2(), "rule__Template__NameAssignment_2");
			builder.put(grammarAccess.getColumnAccess().getNameAssignment_2(), "rule__Column__NameAssignment_2");
			builder.put(grammarAccess.getDatatypeAccess().getDtNameAssignment_2(), "rule__Datatype__DtNameAssignment_2");
			builder.put(grammarAccess.getConstantAccess().getConstNameAssignment_2_0(), "rule__Constant__ConstNameAssignment_2_0");
			builder.put(grammarAccess.getConstantAccess().getConstStrAssignment_2_1(), "rule__Constant__ConstStrAssignment_2_1");
			builder.put(grammarAccess.getIResourceAccess().getUriRefAssignment_0(), "rule__IResource__UriRefAssignment_0");
			builder.put(grammarAccess.getIResourceAccess().getQnameAssignment_1(), "rule__IResource__QnameAssignment_1");
			builder.put(grammarAccess.getNodeIDAccess().getNameAssignment_1(), "rule__NodeID__NameAssignment_1");
			builder.put(grammarAccess.getQnameAccess().getPrefixNameAssignment_1(), "rule__Qname__PrefixNameAssignment_1");
			builder.put(grammarAccess.getQnameAccess().getNameAssignment_2(), "rule__Qname__NameAssignment_2");
			builder.put(grammarAccess.getSimpleSelectStatementAccess().getSelectedColumnsAssignment_1(), "rule__SimpleSelectStatement__SelectedColumnsAssignment_1");
			builder.put(grammarAccess.getSimpleSelectStatementAccess().getTableNameAssignment_3(), "rule__SimpleSelectStatement__TableNameAssignment_3");
			builder.put(grammarAccess.getSimpleSelectStatementAccess().getWhereClauseAssignment_4(), "rule__SimpleSelectStatement__WhereClauseAssignment_4");
			builder.put(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_0(), "rule__SelectedColumns__ColumnsAssignment_0");
			builder.put(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_1_1(), "rule__SelectedColumns__ColumnsAssignment_1_1");
			builder.put(grammarAccess.getWhereClauseAccess().getConditionsAssignment_1(), "rule__WhereClause__ConditionsAssignment_1");
			builder.put(grammarAccess.getWhereClauseAccess().getLogicAssignment_2_0(), "rule__WhereClause__LogicAssignment_2_0");
			builder.put(grammarAccess.getWhereClauseAccess().getConditionsAssignment_2_1(), "rule__WhereClause__ConditionsAssignment_2_1");
			builder.put(grammarAccess.getConditionAccess().getColumnAssignment_0(), "rule__Condition__ColumnAssignment_0");
			builder.put(grammarAccess.getConditionAccess().getOperatorAssignment_1(), "rule__Condition__OperatorAssignment_1");
			builder.put(grammarAccess.getConditionAccess().getValueAssignment_2(), "rule__Condition__ValueAssignment_2");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
			builder.put(grammarAccess.getNumberValueAccess().getValueAssignment(), "rule__NumberValue__ValueAssignment");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private R2RMLGrammarAccess grammarAccess;

	@Override
	protected InternalR2RMLParser createParser() {
		InternalR2RMLParser result = new InternalR2RMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public R2RMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(R2RMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
