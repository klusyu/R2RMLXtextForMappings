/*
 * generated by Xtext 2.33.0
 */
grammar InternalR2RML;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.R2RMLGrammarAccess;

}
@parser::members {
	private R2RMLGrammarAccess grammarAccess;

	public void setGrammarAccess(R2RMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMapping
entryRuleMapping
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingAccess().getStatementsAssignment()); }
		(rule__Mapping__StatementsAssignment)*
		{ after(grammarAccess.getMappingAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getGroup()); }
		(rule__Statement__Group__0)
		{ after(grammarAccess.getStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefix
entryRulePrefix
:
{ before(grammarAccess.getPrefixRule()); }
	 rulePrefix
{ after(grammarAccess.getPrefixRule()); } 
	 EOF 
;

// Rule Prefix
rulePrefix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixAccess().getGroup()); }
		(rule__Prefix__Group__0)
		{ after(grammarAccess.getPrefixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTriplesMap
entryRuleTriplesMap
:
{ before(grammarAccess.getTriplesMapRule()); }
	 ruleTriplesMap
{ after(grammarAccess.getTriplesMapRule()); } 
	 EOF 
;

// Rule TriplesMap
ruleTriplesMap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriplesMapAccess().getGroup()); }
		(rule__TriplesMap__Group__0)
		{ after(grammarAccess.getTriplesMapAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalTable
entryRuleLogicalTable
:
{ before(grammarAccess.getLogicalTableRule()); }
	 ruleLogicalTable
{ after(grammarAccess.getLogicalTableRule()); } 
	 EOF 
;

// Rule LogicalTable
ruleLogicalTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalTableAccess().getGroup()); }
		(rule__LogicalTable__Group__0)
		{ after(grammarAccess.getLogicalTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubjectMap
entryRuleSubjectMap
:
{ before(grammarAccess.getSubjectMapRule()); }
	 ruleSubjectMap
{ after(grammarAccess.getSubjectMapRule()); } 
	 EOF 
;

// Rule SubjectMap
ruleSubjectMap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubjectMapAccess().getGroup()); }
		(rule__SubjectMap__Group__0)
		{ after(grammarAccess.getSubjectMapAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicateObjectMap
entryRulePredicateObjectMap
:
{ before(grammarAccess.getPredicateObjectMapRule()); }
	 rulePredicateObjectMap
{ after(grammarAccess.getPredicateObjectMapRule()); } 
	 EOF 
;

// Rule PredicateObjectMap
rulePredicateObjectMap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateObjectMapAccess().getGroup()); }
		(rule__PredicateObjectMap__Group__0)
		{ after(grammarAccess.getPredicateObjectMapAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectMap
entryRuleObjectMap
:
{ before(grammarAccess.getObjectMapRule()); }
	 ruleObjectMap
{ after(grammarAccess.getObjectMapRule()); } 
	 EOF 
;

// Rule ObjectMap
ruleObjectMap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectMapAccess().getGroup()); }
		(rule__ObjectMap__Group__0)
		{ after(grammarAccess.getObjectMapAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClass
entryRuleClass
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassAccess().getGroup()); }
		(rule__Class__Group__0)
		{ after(grammarAccess.getClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getGroup()); }
		(rule__Predicate__Group__0)
		{ after(grammarAccess.getPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTemplate
entryRuleTemplate
:
{ before(grammarAccess.getTemplateRule()); }
	 ruleTemplate
{ after(grammarAccess.getTemplateRule()); } 
	 EOF 
;

// Rule Template
ruleTemplate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTemplateAccess().getGroup()); }
		(rule__Template__Group__0)
		{ after(grammarAccess.getTemplateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumn
entryRuleColumn
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getGroup()); }
		(rule__Column__Group__0)
		{ after(grammarAccess.getColumnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDatatype
entryRuleDatatype
:
{ before(grammarAccess.getDatatypeRule()); }
	 ruleDatatype
{ after(grammarAccess.getDatatypeRule()); } 
	 EOF 
;

// Rule Datatype
ruleDatatype 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatatypeAccess().getGroup()); }
		(rule__Datatype__Group__0)
		{ after(grammarAccess.getDatatypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getGroup()); }
		(rule__Constant__Group__0)
		{ after(grammarAccess.getConstantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleiResource
entryRuleiResource
:
{ before(grammarAccess.getIResourceRule()); }
	 ruleiResource
{ after(grammarAccess.getIResourceRule()); } 
	 EOF 
;

// Rule iResource
ruleiResource 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIResourceAccess().getAlternatives()); }
		(rule__IResource__Alternatives)
		{ after(grammarAccess.getIResourceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQname
entryRuleQname
:
{ before(grammarAccess.getQnameRule()); }
	 ruleQname
{ after(grammarAccess.getQnameRule()); } 
	 EOF 
;

// Rule Qname
ruleQname 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQnameAccess().getGroup()); }
		(rule__Qname__Group__0)
		{ after(grammarAccess.getQnameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefixName
entryRulePrefixName
:
{ before(grammarAccess.getPrefixNameRule()); }
	 rulePrefixName
{ after(grammarAccess.getPrefixNameRule()); } 
	 EOF 
;

// Rule PrefixName
rulePrefixName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixNameAccess().getGroup()); }
		(rule__PrefixName__Group__0)
		{ after(grammarAccess.getPrefixNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuotedString
entryRuleQuotedString
:
{ before(grammarAccess.getQuotedStringRule()); }
	 ruleQuotedString
{ after(grammarAccess.getQuotedStringRule()); } 
	 EOF 
;

// Rule QuotedString
ruleQuotedString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuotedStringAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getQuotedStringAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleSelectStatement
entryRuleSimpleSelectStatement
:
{ before(grammarAccess.getSimpleSelectStatementRule()); }
	 ruleSimpleSelectStatement
{ after(grammarAccess.getSimpleSelectStatementRule()); } 
	 EOF 
;

// Rule SimpleSelectStatement
ruleSimpleSelectStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleSelectStatementAccess().getGroup()); }
		(rule__SimpleSelectStatement__Group__0)
		{ after(grammarAccess.getSimpleSelectStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectedColumns
entryRuleSelectedColumns
:
{ before(grammarAccess.getSelectedColumnsRule()); }
	 ruleSelectedColumns
{ after(grammarAccess.getSelectedColumnsRule()); } 
	 EOF 
;

// Rule SelectedColumns
ruleSelectedColumns 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectedColumnsAccess().getGroup()); }
		(rule__SelectedColumns__Group__0)
		{ after(grammarAccess.getSelectedColumnsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhereClause
entryRuleWhereClause
:
{ before(grammarAccess.getWhereClauseRule()); }
	 ruleWhereClause
{ after(grammarAccess.getWhereClauseRule()); } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhereClauseAccess().getGroup()); }
		(rule__WhereClause__Group__0)
		{ after(grammarAccess.getWhereClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogic
entryRuleLogic
:
{ before(grammarAccess.getLogicRule()); }
	 ruleLogic
{ after(grammarAccess.getLogicRule()); } 
	 EOF 
;

// Rule Logic
ruleLogic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicAccess().getAlternatives()); }
		(rule__Logic__Alternatives)
		{ after(grammarAccess.getLogicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperator
entryRuleOperator
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleOperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule Operator
ruleOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
		(rule__Operator__Alternatives)
		{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
		(rule__BooleanValue__ValueAssignment)
		{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberValue
entryRuleNumberValue
:
{ before(grammarAccess.getNumberValueRule()); }
	 ruleNumberValue
{ after(grammarAccess.getNumberValueRule()); } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberValueAccess().getValueAssignment()); }
		(rule__NumberValue__ValueAssignment)
		{ after(grammarAccess.getNumberValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue
entryRuleStringValue
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
		(rule__StringValue__ValueAssignment)
		{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getPrefixAssignment_0_0()); }
		(rule__Statement__PrefixAssignment_0_0)
		{ after(grammarAccess.getStatementAccess().getPrefixAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTriplesMapAssignment_0_1()); }
		(rule__Statement__TriplesMapAssignment_0_1)
		{ after(grammarAccess.getStatementAccess().getTriplesMapAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalTableAccess().getGroup_3_0()); }
		(rule__LogicalTable__Group_3_0__0)
		{ after(grammarAccess.getLogicalTableAccess().getGroup_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalTableAccess().getGroup_3_1()); }
		(rule__LogicalTable__Group_3_1__0)
		{ after(grammarAccess.getLogicalTableAccess().getGroup_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getConstNameAssignment_2_0()); }
		(rule__Constant__ConstNameAssignment_2_0)
		{ after(grammarAccess.getConstantAccess().getConstNameAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getConstStrAssignment_2_1()); }
		(rule__Constant__ConstStrAssignment_2_1)
		{ after(grammarAccess.getConstantAccess().getConstStrAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IResource__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIResourceAccess().getUriRefAssignment_0()); }
		(rule__IResource__UriRefAssignment_0)
		{ after(grammarAccess.getIResourceAccess().getUriRefAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getIResourceAccess().getQnameAssignment_1()); }
		(rule__IResource__QnameAssignment_1)
		{ after(grammarAccess.getIResourceAccess().getQnameAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Logic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicAccess().getANDKeyword_0()); }
		'AND'
		{ after(grammarAccess.getLogicAccess().getANDKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicAccess().getORKeyword_1()); }
		'OR'
		{ after(grammarAccess.getLogicAccess().getORKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getEqualsSignKeyword_0()); }
		'='
		{ after(grammarAccess.getOperatorAccess().getEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }
		'<>'
		{ after(grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getLessThanSignKeyword_2()); }
		'<'
		{ after(grammarAccess.getOperatorAccess().getLessThanSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
		'<='
		{ after(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4()); }
		'>'
		{ after(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_5()); }
		'>='
		{ after(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_0()); }
		ruleBooleanValue
		{ after(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getNumberValueParserRuleCall_1()); }
		ruleNumberValue
		{ after(grammarAccess.getValueAccess().getNumberValueParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getStringValueParserRuleCall_2()); }
		ruleStringValue
		{ after(grammarAccess.getValueAccess().getStringValueParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0()); }
		'true'
		{ after(grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_1()); }
		'false'
		{ after(grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getAlternatives_0()); }
	(rule__Statement__Alternatives_0)
	{ after(grammarAccess.getStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getStatementAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefix__Group__0__Impl
	rule__Prefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixAccess().getPrefixKeyword_0()); }
	'@prefix'
	{ after(grammarAccess.getPrefixAccess().getPrefixKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefix__Group__1__Impl
	rule__Prefix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixAccess().getPrefixNameAssignment_1()); }
	(rule__Prefix__PrefixNameAssignment_1)
	{ after(grammarAccess.getPrefixAccess().getPrefixNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefix__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixAccess().getUriAssignment_2()); }
	(rule__Prefix__UriAssignment_2)
	{ after(grammarAccess.getPrefixAccess().getUriAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TriplesMap__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriplesMap__Group__0__Impl
	rule__TriplesMap__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesMapAccess().getNameAssignment_0()); }
	(rule__TriplesMap__NameAssignment_0)
	{ after(grammarAccess.getTriplesMapAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriplesMap__Group__1__Impl
	rule__TriplesMap__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesMapAccess().getLogicalTableAssignment_1()); }
	(rule__TriplesMap__LogicalTableAssignment_1)
	{ after(grammarAccess.getTriplesMapAccess().getLogicalTableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriplesMap__Group__2__Impl
	rule__TriplesMap__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesMapAccess().getSubjectMapAssignment_2()); }
	(rule__TriplesMap__SubjectMapAssignment_2)?
	{ after(grammarAccess.getTriplesMapAccess().getSubjectMapAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriplesMap__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriplesMapAccess().getPredicateObjectMapsAssignment_3()); }
	(rule__TriplesMap__PredicateObjectMapsAssignment_3)*
	{ after(grammarAccess.getTriplesMapAccess().getPredicateObjectMapsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalTable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group__0__Impl
	rule__LogicalTable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getPrefixNameParserRuleCall_0()); }
	rulePrefixName
	{ after(grammarAccess.getLogicalTableAccess().getPrefixNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group__1__Impl
	rule__LogicalTable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getLogicalTableKeyword_1()); }
	'logicalTable'
	{ after(grammarAccess.getLogicalTableAccess().getLogicalTableKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group__2__Impl
	rule__LogicalTable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getLeftSquareBracketKeyword_2()); }
	'['
	{ after(grammarAccess.getLogicalTableAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group__3__Impl
	rule__LogicalTable__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getAlternatives_3()); }
	(rule__LogicalTable__Alternatives_3)
	{ after(grammarAccess.getLogicalTableAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group__4__Impl
	rule__LogicalTable__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getLogicalTableAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getSemicolonKeyword_5()); }
	(';')?
	{ after(grammarAccess.getLogicalTableAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalTable__Group_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group_3_0__0__Impl
	rule__LogicalTable__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getPrefixNameParserRuleCall_3_0_0()); }
	rulePrefixName
	{ after(grammarAccess.getLogicalTableAccess().getPrefixNameParserRuleCall_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group_3_0__1__Impl
	rule__LogicalTable__Group_3_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getSqlQueryKeyword_3_0_1()); }
	'sqlQuery'
	{ after(grammarAccess.getLogicalTableAccess().getSqlQueryKeyword_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group_3_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group_3_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group_3_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getQueryAssignment_3_0_2()); }
	(rule__LogicalTable__QueryAssignment_3_0_2)
	{ after(grammarAccess.getLogicalTableAccess().getQueryAssignment_3_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalTable__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group_3_1__0__Impl
	rule__LogicalTable__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getPrefixNameParserRuleCall_3_1_0()); }
	rulePrefixName
	{ after(grammarAccess.getLogicalTableAccess().getPrefixNameParserRuleCall_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group_3_1__1__Impl
	rule__LogicalTable__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getTableNameKeyword_3_1_1()); }
	'tableName'
	{ after(grammarAccess.getLogicalTableAccess().getTableNameKeyword_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group_3_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalTable__Group_3_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__Group_3_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalTableAccess().getTableNameAssignment_3_1_2()); }
	(rule__LogicalTable__TableNameAssignment_3_1_2)
	{ after(grammarAccess.getLogicalTableAccess().getTableNameAssignment_3_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubjectMap__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubjectMap__Group__0__Impl
	rule__SubjectMap__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectMapAccess().getPrefixNameParserRuleCall_0()); }
	rulePrefixName
	{ after(grammarAccess.getSubjectMapAccess().getPrefixNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubjectMap__Group__1__Impl
	rule__SubjectMap__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectMapAccess().getSubjectMapKeyword_1()); }
	'subjectMap'
	{ after(grammarAccess.getSubjectMapAccess().getSubjectMapKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubjectMap__Group__2__Impl
	rule__SubjectMap__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectMapAccess().getLeftSquareBracketKeyword_2()); }
	'['
	{ after(grammarAccess.getSubjectMapAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubjectMap__Group__3__Impl
	rule__SubjectMap__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectMapAccess().getTemplateAssignment_3()); }
	(rule__SubjectMap__TemplateAssignment_3)
	{ after(grammarAccess.getSubjectMapAccess().getTemplateAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubjectMap__Group__4__Impl
	rule__SubjectMap__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectMapAccess().getClassAssignment_4()); }
	(rule__SubjectMap__ClassAssignment_4)?
	{ after(grammarAccess.getSubjectMapAccess().getClassAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubjectMap__Group__5__Impl
	rule__SubjectMap__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectMapAccess().getRightSquareBracketKeyword_5()); }
	']'
	{ after(grammarAccess.getSubjectMapAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubjectMap__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubjectMapAccess().getSemicolonKeyword_6()); }
	(';')?
	{ after(grammarAccess.getSubjectMapAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateObjectMap__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectMap__Group__0__Impl
	rule__PredicateObjectMap__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectMapAccess().getPrefixNameParserRuleCall_0()); }
	rulePrefixName
	{ after(grammarAccess.getPredicateObjectMapAccess().getPrefixNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectMap__Group__1__Impl
	rule__PredicateObjectMap__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectMapAccess().getPredicateObjectMapKeyword_1()); }
	'predicateObjectMap'
	{ after(grammarAccess.getPredicateObjectMapAccess().getPredicateObjectMapKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectMap__Group__2__Impl
	rule__PredicateObjectMap__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectMapAccess().getLeftSquareBracketKeyword_2()); }
	'['
	{ after(grammarAccess.getPredicateObjectMapAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectMap__Group__3__Impl
	rule__PredicateObjectMap__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectMapAccess().getPredicateAssignment_3()); }
	(rule__PredicateObjectMap__PredicateAssignment_3)
	{ after(grammarAccess.getPredicateObjectMapAccess().getPredicateAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectMap__Group__4__Impl
	rule__PredicateObjectMap__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectMapAccess().getObjectMapAssignment_4()); }
	(rule__PredicateObjectMap__ObjectMapAssignment_4)
	{ after(grammarAccess.getPredicateObjectMapAccess().getObjectMapAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectMap__Group__5__Impl
	rule__PredicateObjectMap__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectMapAccess().getRightSquareBracketKeyword_5()); }
	']'
	{ after(grammarAccess.getPredicateObjectMapAccess().getRightSquareBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredicateObjectMap__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateObjectMapAccess().getSemicolonKeyword_6()); }
	(';')?
	{ after(grammarAccess.getPredicateObjectMapAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectMap__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectMap__Group__0__Impl
	rule__ObjectMap__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectMapAccess().getObjectMapAction_0()); }
	()
	{ after(grammarAccess.getObjectMapAccess().getObjectMapAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectMap__Group__1__Impl
	rule__ObjectMap__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectMapAccess().getPrefixNameParserRuleCall_1()); }
	rulePrefixName
	{ after(grammarAccess.getObjectMapAccess().getPrefixNameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectMap__Group__2__Impl
	rule__ObjectMap__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectMapAccess().getObjectMapKeyword_2()); }
	'objectMap'
	{ after(grammarAccess.getObjectMapAccess().getObjectMapKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectMap__Group__3__Impl
	rule__ObjectMap__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectMapAccess().getLeftSquareBracketKeyword_3()); }
	'['
	{ after(grammarAccess.getObjectMapAccess().getLeftSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectMap__Group__4__Impl
	rule__ObjectMap__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectMapAccess().getColumnAssignment_4()); }
	(rule__ObjectMap__ColumnAssignment_4)?
	{ after(grammarAccess.getObjectMapAccess().getColumnAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectMap__Group__5__Impl
	rule__ObjectMap__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectMapAccess().getTemplateAssignment_5()); }
	(rule__ObjectMap__TemplateAssignment_5)?
	{ after(grammarAccess.getObjectMapAccess().getTemplateAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectMap__Group__6__Impl
	rule__ObjectMap__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectMapAccess().getConstantAssignment_6()); }
	(rule__ObjectMap__ConstantAssignment_6)?
	{ after(grammarAccess.getObjectMapAccess().getConstantAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectMap__Group__7__Impl
	rule__ObjectMap__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectMapAccess().getDatatypeAssignment_7()); }
	(rule__ObjectMap__DatatypeAssignment_7)?
	{ after(grammarAccess.getObjectMapAccess().getDatatypeAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectMap__Group__8__Impl
	rule__ObjectMap__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectMapAccess().getRightSquareBracketKeyword_8()); }
	']'
	{ after(grammarAccess.getObjectMapAccess().getRightSquareBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectMap__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectMapAccess().getSemicolonKeyword_9()); }
	(';')?
	{ after(grammarAccess.getObjectMapAccess().getSemicolonKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getPrefixNameParserRuleCall_0()); }
	rulePrefixName
	{ after(grammarAccess.getClassAccess().getPrefixNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getClassKeyword_1()); }
	'class'
	{ after(grammarAccess.getClassAccess().getClassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getClassNameAssignment_2()); }
	(rule__Class__ClassNameAssignment_2)
	{ after(grammarAccess.getClassAccess().getClassNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getSemicolonKeyword_3()); }
	(';')?
	{ after(grammarAccess.getClassAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getPrefixNameParserRuleCall_0()); }
	rulePrefixName
	{ after(grammarAccess.getPredicateAccess().getPrefixNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__1__Impl
	rule__Predicate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getPredicateKeyword_1()); }
	'predicate'
	{ after(grammarAccess.getPredicateAccess().getPredicateKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__2__Impl
	rule__Predicate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getPredicateNameAssignment_2()); }
	(rule__Predicate__PredicateNameAssignment_2)
	{ after(grammarAccess.getPredicateAccess().getPredicateNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getSemicolonKeyword_3()); }
	(';')?
	{ after(grammarAccess.getPredicateAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Template__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Template__Group__0__Impl
	rule__Template__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Template__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemplateAccess().getPrefixNameParserRuleCall_0()); }
	rulePrefixName
	{ after(grammarAccess.getTemplateAccess().getPrefixNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Template__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Template__Group__1__Impl
	rule__Template__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Template__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemplateAccess().getTemplateKeyword_1()); }
	'template'
	{ after(grammarAccess.getTemplateAccess().getTemplateKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Template__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Template__Group__2__Impl
	rule__Template__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Template__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemplateAccess().getNameAssignment_2()); }
	(rule__Template__NameAssignment_2)
	{ after(grammarAccess.getTemplateAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Template__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Template__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Template__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemplateAccess().getSemicolonKeyword_3()); }
	(';')?
	{ after(grammarAccess.getTemplateAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getPrefixNameParserRuleCall_0()); }
	rulePrefixName
	{ after(grammarAccess.getColumnAccess().getPrefixNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getColumnKeyword_1()); }
	'column'
	{ after(grammarAccess.getColumnAccess().getColumnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__2__Impl
	rule__Column__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getNameAssignment_2()); }
	(rule__Column__NameAssignment_2)
	{ after(grammarAccess.getColumnAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getSemicolonKeyword_3()); }
	(';')?
	{ after(grammarAccess.getColumnAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Datatype__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__0__Impl
	rule__Datatype__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getPrefixNameParserRuleCall_0()); }
	rulePrefixName
	{ after(grammarAccess.getDatatypeAccess().getPrefixNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__1__Impl
	rule__Datatype__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getDatatypeKeyword_1()); }
	'datatype'
	{ after(grammarAccess.getDatatypeAccess().getDatatypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__2__Impl
	rule__Datatype__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getDtNameAssignment_2()); }
	(rule__Datatype__DtNameAssignment_2)
	{ after(grammarAccess.getDatatypeAccess().getDtNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getSemicolonKeyword_3()); }
	(';')?
	{ after(grammarAccess.getDatatypeAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getPrefixNameParserRuleCall_0()); }
	rulePrefixName
	{ after(grammarAccess.getConstantAccess().getPrefixNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__1__Impl
	rule__Constant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getConstantKeyword_1()); }
	'constant'
	{ after(grammarAccess.getConstantAccess().getConstantKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__2__Impl
	rule__Constant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getAlternatives_2()); }
	(rule__Constant__Alternatives_2)
	{ after(grammarAccess.getConstantAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getSemicolonKeyword_3()); }
	(';')?
	{ after(grammarAccess.getConstantAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Qname__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qname__Group__0__Impl
	rule__Qname__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQnameAccess().getQnameAction_0()); }
	()
	{ after(grammarAccess.getQnameAccess().getQnameAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qname__Group__1__Impl
	rule__Qname__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQnameAccess().getPrefixNameAssignment_1()); }
	(rule__Qname__PrefixNameAssignment_1)
	{ after(grammarAccess.getQnameAccess().getPrefixNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qname__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQnameAccess().getNameAssignment_2()); }
	(rule__Qname__NameAssignment_2)?
	{ after(grammarAccess.getQnameAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixName__Group__0__Impl
	rule__PrefixName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixNameAccess().getIDTerminalRuleCall_0()); }
	(RULE_ID)?
	{ after(grammarAccess.getPrefixNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixNameAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getPrefixNameAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleSelectStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleSelectStatement__Group__0__Impl
	rule__SimpleSelectStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleSelectStatementAccess().getSELECTKeyword_0()); }
	'SELECT'
	{ after(grammarAccess.getSimpleSelectStatementAccess().getSELECTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleSelectStatement__Group__1__Impl
	rule__SimpleSelectStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleSelectStatementAccess().getSelectedColumnsAssignment_1()); }
	(rule__SimpleSelectStatement__SelectedColumnsAssignment_1)
	{ after(grammarAccess.getSimpleSelectStatementAccess().getSelectedColumnsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleSelectStatement__Group__2__Impl
	rule__SimpleSelectStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleSelectStatementAccess().getFROMKeyword_2()); }
	'FROM'
	{ after(grammarAccess.getSimpleSelectStatementAccess().getFROMKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleSelectStatement__Group__3__Impl
	rule__SimpleSelectStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleSelectStatementAccess().getTableNameAssignment_3()); }
	(rule__SimpleSelectStatement__TableNameAssignment_3)
	{ after(grammarAccess.getSimpleSelectStatementAccess().getTableNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleSelectStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleSelectStatementAccess().getWhereClauseAssignment_4()); }
	(rule__SimpleSelectStatement__WhereClauseAssignment_4)?
	{ after(grammarAccess.getSimpleSelectStatementAccess().getWhereClauseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedColumns__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectedColumns__Group__0__Impl
	rule__SelectedColumns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_0()); }
	(rule__SelectedColumns__ColumnsAssignment_0)
	{ after(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectedColumns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectedColumnsAccess().getGroup_1()); }
	(rule__SelectedColumns__Group_1__0)*
	{ after(grammarAccess.getSelectedColumnsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedColumns__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectedColumns__Group_1__0__Impl
	rule__SelectedColumns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectedColumnsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getSelectedColumnsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectedColumns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_1_1()); }
	(rule__SelectedColumns__ColumnsAssignment_1_1)
	{ after(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhereClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__0__Impl
	rule__WhereClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
	'WHERE'
	{ after(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__1__Impl
	rule__WhereClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getConditionsAssignment_1()); }
	(rule__WhereClause__ConditionsAssignment_1)
	{ after(grammarAccess.getWhereClauseAccess().getConditionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getGroup_2()); }
	(rule__WhereClause__Group_2__0)*
	{ after(grammarAccess.getWhereClauseAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhereClause__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group_2__0__Impl
	rule__WhereClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getLogicAssignment_2_0()); }
	(rule__WhereClause__LogicAssignment_2_0)
	{ after(grammarAccess.getWhereClauseAccess().getLogicAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getConditionsAssignment_2_1()); }
	(rule__WhereClause__ConditionsAssignment_2_1)
	{ after(grammarAccess.getWhereClauseAccess().getConditionsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getColumnAssignment_0()); }
	(rule__Condition__ColumnAssignment_0)
	{ after(grammarAccess.getConditionAccess().getColumnAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getOperatorAssignment_1()); }
	(rule__Condition__OperatorAssignment_1)
	{ after(grammarAccess.getConditionAccess().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getValueAssignment_2()); }
	(rule__Condition__ValueAssignment_2)
	{ after(grammarAccess.getConditionAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getMappingAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__PrefixAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getPrefixPrefixParserRuleCall_0_0_0()); }
		rulePrefix
		{ after(grammarAccess.getStatementAccess().getPrefixPrefixParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__TriplesMapAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getTriplesMapTriplesMapParserRuleCall_0_1_0()); }
		ruleTriplesMap
		{ after(grammarAccess.getStatementAccess().getTriplesMapTriplesMapParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__PrefixNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixAccess().getPrefixNamePrefixNameParserRuleCall_1_0()); }
		rulePrefixName
		{ after(grammarAccess.getPrefixAccess().getPrefixNamePrefixNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__UriAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixAccess().getUriURIREFTerminalRuleCall_2_0()); }
		RULE_URIREF
		{ after(grammarAccess.getPrefixAccess().getUriURIREFTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriplesMapAccess().getNameURIREFTerminalRuleCall_0_0()); }
		RULE_URIREF
		{ after(grammarAccess.getTriplesMapAccess().getNameURIREFTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__LogicalTableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriplesMapAccess().getLogicalTableLogicalTableParserRuleCall_1_0()); }
		ruleLogicalTable
		{ after(grammarAccess.getTriplesMapAccess().getLogicalTableLogicalTableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__SubjectMapAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriplesMapAccess().getSubjectMapSubjectMapParserRuleCall_2_0()); }
		ruleSubjectMap
		{ after(grammarAccess.getTriplesMapAccess().getSubjectMapSubjectMapParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriplesMap__PredicateObjectMapsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriplesMapAccess().getPredicateObjectMapsPredicateObjectMapParserRuleCall_3_0()); }
		rulePredicateObjectMap
		{ after(grammarAccess.getTriplesMapAccess().getPredicateObjectMapsPredicateObjectMapParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__QueryAssignment_3_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalTableAccess().getQuerySimpleSelectStatementParserRuleCall_3_0_2_0()); }
		ruleSimpleSelectStatement
		{ after(grammarAccess.getLogicalTableAccess().getQuerySimpleSelectStatementParserRuleCall_3_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalTable__TableNameAssignment_3_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalTableAccess().getTableNameSTRINGTerminalRuleCall_3_1_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getLogicalTableAccess().getTableNameSTRINGTerminalRuleCall_3_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__TemplateAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubjectMapAccess().getTemplateTemplateParserRuleCall_3_0()); }
		ruleTemplate
		{ after(grammarAccess.getSubjectMapAccess().getTemplateTemplateParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubjectMap__ClassAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubjectMapAccess().getClassClassParserRuleCall_4_0()); }
		ruleClass
		{ after(grammarAccess.getSubjectMapAccess().getClassClassParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__PredicateAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectMapAccess().getPredicatePredicateParserRuleCall_3_0()); }
		rulePredicate
		{ after(grammarAccess.getPredicateObjectMapAccess().getPredicatePredicateParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateObjectMap__ObjectMapAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateObjectMapAccess().getObjectMapObjectMapParserRuleCall_4_0()); }
		ruleObjectMap
		{ after(grammarAccess.getPredicateObjectMapAccess().getObjectMapObjectMapParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__ColumnAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectMapAccess().getColumnColumnParserRuleCall_4_0()); }
		ruleColumn
		{ after(grammarAccess.getObjectMapAccess().getColumnColumnParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__TemplateAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectMapAccess().getTemplateTemplateParserRuleCall_5_0()); }
		ruleTemplate
		{ after(grammarAccess.getObjectMapAccess().getTemplateTemplateParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__ConstantAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectMapAccess().getConstantConstantParserRuleCall_6_0()); }
		ruleConstant
		{ after(grammarAccess.getObjectMapAccess().getConstantConstantParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectMap__DatatypeAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectMapAccess().getDatatypeDatatypeParserRuleCall_7_0()); }
		ruleDatatype
		{ after(grammarAccess.getObjectMapAccess().getDatatypeDatatypeParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__ClassNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getClassNameQnameParserRuleCall_2_0()); }
		ruleQname
		{ after(grammarAccess.getClassAccess().getClassNameQnameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__PredicateNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getPredicateNameQnameParserRuleCall_2_0()); }
		ruleQname
		{ after(grammarAccess.getPredicateAccess().getPredicateNameQnameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Template__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemplateAccess().getNameQuotedStringParserRuleCall_2_0()); }
		ruleQuotedString
		{ after(grammarAccess.getTemplateAccess().getNameQuotedStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getNameQuotedStringParserRuleCall_2_0()); }
		ruleQuotedString
		{ after(grammarAccess.getColumnAccess().getNameQuotedStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__DtNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getDtNameQnameParserRuleCall_2_0()); }
		ruleQname
		{ after(grammarAccess.getDatatypeAccess().getDtNameQnameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ConstNameAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getConstNameIResourceParserRuleCall_2_0_0()); }
		ruleiResource
		{ after(grammarAccess.getConstantAccess().getConstNameIResourceParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ConstStrAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getConstStrQuotedStringParserRuleCall_2_1_0()); }
		ruleQuotedString
		{ after(grammarAccess.getConstantAccess().getConstStrQuotedStringParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IResource__UriRefAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIResourceAccess().getUriRefURIREFTerminalRuleCall_0_0()); }
		RULE_URIREF
		{ after(grammarAccess.getIResourceAccess().getUriRefURIREFTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IResource__QnameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIResourceAccess().getQnameQnameParserRuleCall_1_0()); }
		ruleQname
		{ after(grammarAccess.getIResourceAccess().getQnameQnameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__PrefixNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQnameAccess().getPrefixNamePrefixNameParserRuleCall_1_0()); }
		rulePrefixName
		{ after(grammarAccess.getQnameAccess().getPrefixNamePrefixNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qname__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQnameAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getQnameAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__SelectedColumnsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleSelectStatementAccess().getSelectedColumnsSelectedColumnsParserRuleCall_1_0()); }
		ruleSelectedColumns
		{ after(grammarAccess.getSimpleSelectStatementAccess().getSelectedColumnsSelectedColumnsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__TableNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleSelectStatementAccess().getTableNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getSimpleSelectStatementAccess().getTableNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSelectStatement__WhereClauseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_4_0()); }
		ruleWhereClause
		{ after(grammarAccess.getSimpleSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__ColumnsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__ColumnsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__ConditionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereClauseAccess().getConditionsConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getWhereClauseAccess().getConditionsConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__LogicAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereClauseAccess().getLogicLogicParserRuleCall_2_0_0()); }
		ruleLogic
		{ after(grammarAccess.getWhereClauseAccess().getLogicLogicParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__ConditionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereClauseAccess().getConditionsConditionParserRuleCall_2_1_0()); }
		ruleCondition
		{ after(grammarAccess.getWhereClauseAccess().getConditionsConditionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ColumnAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getColumnIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getConditionAccess().getColumnIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getOperatorOperatorParserRuleCall_1_0()); }
		ruleOperator
		{ after(grammarAccess.getConditionAccess().getOperatorOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getValueValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getConditionAccess().getValueValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueAlternatives_0()); }
		(rule__BooleanValue__ValueAlternatives_0)
		{ after(grammarAccess.getBooleanValueAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : ('-'|'+')? (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT|'.' ('0'..'9')+ RULE_EXPONENT|('0'..'9')+ RULE_EXPONENT);

RULE_DECIMAL : ('-'|'+')? (('0'..'9')+ '.' ('0'..'9')*|'.' ('0'..'9')+);

fragment RULE_EXPONENT : ('e'|'E') ('-'|'+')? ('0'..'9')+;

RULE_URIREF : '<' ( options {greedy=false;} : . )*'>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\''|'"""' ( options {greedy=false;} : . )*'"""');

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
